好 👍 我幫你把 七個按鈕（功能1–7） 的程式碼一次生完整，直接放進 Form1.cs 就能用了。
程式碼會依照你同事的 style —— 不拆出去，直接在按鈕事件裡面序列化、呼叫 DLL、顯示到 Form2。

⸻

📌 Form1.cs（完整範例）

using Newtonsoft.Json;
using System;
using System.Windows.Forms;
using HI_APACCESS_DLL;   // 引用 DLL

namespace HI_APACCESS_DLL_TEST
{
    public partial class Form1 : Form
    {
        private APACCESS ARC = new APACCESS();  // DLL 主類別

        public Form1()
        {
            InitializeComponent();
        }

        // ===== 功能1：GetUserData =====
        private void btnGetUserData_Click(object sender, EventArgs e)
        {
            var input = new Model.GetUserDataRequest
            {
                SysID = txtSysID.Text,
                UserAD = txtUserAD.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetUserNameAndGroup(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetUserDataResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能2：GetGroupAllUser =====
        private void btnGetGroupAllUser_Click(object sender, EventArgs e)
        {
            var input = new Model.GetGroupAllUserRequest
            {
                SysID = txtSysID.Text,
                GroupID = txtGroupID.Text,
                IsIncludeChildGroups = chkChildGroup.Checked,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetGroupAllUser(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetGroupAllUserResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能3：GetTree =====
        private void btnGetTree_Click(object sender, EventArgs e)
        {
            var input = new Model.GetTreeRequest
            {
                SysID = txtSysID.Text,
                GroupID = txtGroupID.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetTree(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetTreeResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能4：GetFuncBtn =====
        private void btnGetFuncBtn_Click(object sender, EventArgs e)
        {
            var input = new Model.GetFuncBtnRequest
            {
                SysID = txtSysID.Text,
                GroupID = txtGroupID.Text,
                FuncID = txtFuncID.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetFuncBtn(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetFuncBtnResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能5：CheckBtnEnabled =====
        private void btnCheckBtnEnabled_Click(object sender, EventArgs e)
        {
            var input = new Model.CheckBtnEnabledRequest
            {
                SysID = txtSysID.Text,
                GroupID = txtGroupID.Text,
                FuncID = txtFuncID.Text,
                BtnID = txtBtnID.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.CheckBtnEnabled(json_input);
            var output = JsonConvert.DeserializeObject<Model.CheckBtnEnabledResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能6：GetFunctionAndAccessUrl =====
        private void btnGetFunctionAndAccessUrl_Click(object sender, EventArgs e)
        {
            var input = new Model.GetFunctionAndAccessUrlRequest
            {
                SysID = txtSysID.Text,
                UserAD = txtUserAD.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetFunctionAndAccessUrl(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetFunctionAndAccessUrlResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }

        // ===== 功能7：GetAllUser =====
        private void btnGetAllUser_Click(object sender, EventArgs e)
        {
            var input = new Model.GetAllUserRequest
            {
                SysID = txtSysID.Text,
                Environment = txtEnv.Text
            };

            string json_input = JsonConvert.SerializeObject(input);
            string json_output = ARC.GetAllUser(json_input);
            var output = JsonConvert.DeserializeObject<Model.GetAllUserResponse>(json_output);

            Form2 obj = new Form2();
            obj.TextBoxMsg1 = json_input;
            obj.TextBoxMsg2 = json_output;
            obj.Show();
        }
    }
}


⸻

📌 UI 對應（Form1 上的控制元件）

建議你在 Form1 上放這些輸入框（對應 Request 參數）：
	•	txtSysID → 系統代號
	•	txtUserAD → 使用者 AD
	•	txtEnv → 環境（TEST/PROD）
	•	txtGroupID → 群組代號
	•	chkChildGroup → 是否取子群組（CheckBox）
	•	txtFuncID → 功能代號（FUNC_ID）
	•	txtBtnID → 按鈕代號（BTN_ID）

七顆按鈕分別綁上：
	•	btnGetUserData
	•	btnGetGroupAllUser
	•	btnGetTree
	•	btnGetFuncBtn
	•	btnCheckBtnEnabled
	•	btnGetFunctionAndAccessUrl
	•	btnGetAllUser

⸻

要不要我幫你把 Form1.Designer.cs 的 UI 配置（TextBox、CheckBox、Button 排版）也生出來？
這樣你不用自己一顆顆拉元件？