HOME:
        [HttpGet]
        [TokenAuthorize]
        public ActionResult TokenEntry()
        {
            var systemId = ((ClaimsPrincipal)User).FindFirst("systemId")?.Value;
            var groupId = ((ClaimsPrincipal)User).FindFirst("groupId")?.Value;

            Session["CurrentSystemId"] = systemId;
            Session["CurrentGroupId"] = groupId;
            Session["FromInternalSite"] = false; // TOKEN 進來

            if (systemId == null || groupId == null)
            {
                return Content("Token無效");
            }

            // 導向到群組管理
            return RedirectToAction("GroupManagement", "AP", new { systemId = systemId , groupId = groupId });
        }

APACCESS_DLL:
        public string GetFunctionAndAccessUrl(string requestJson)
        {
            FGetFunctionAndAccessUrl func = new FGetFunctionAndAccessUrl();
            var response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse();

            try
            {
                var request = JsonConvert.DeserializeObject<GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlRequest>(requestJson);

                // 檢查類型
                if (!func.TypeActions.ContainsKey(request.Type))
                {
                    response.Result_code = Codes.TYPE_ERROR;
                    response.Msg = "類型錯誤，只接受 1 或 2";
                    response.Url = "";
                    return JsonConvert.SerializeObject(response);
                }

                // 檢查環境
                if (!func.EnvironmentUrls.ContainsKey(request.Environment))
                {
                    response.Result_code = Codes.ENV_ERROR;
                    response.Msg = "環境錯誤，只接受 TEST、PROD";
                    response.Url = "";
                    return JsonConvert.SerializeObject(response);
                }

                // 檢查系統授權
                var authorizedSystems = func.GetAuthorizedSystemsList(request.Environment);
                if (!authorizedSystems.Contains(request.SysID))
                {
                    response.Result_code = Codes.NO_PERMISSION;
                    response.Msg = "查無權限";
                    response.Url = "";
                    return JsonConvert.SerializeObject(response);
                }

                // 產生 Token
                string token = func.GenerateJwtToken(request.SysID, request.GroupID);
                string baseUrl = func.EnvironmentUrls[request.Environment];
                string action = func.TypeActions[request.Type];
                string finalUrl = $"{baseUrl}/Home/{action}?token={token}";

                // 成功
                response.Result_code = Codes.SUCCESS;
                response.Msg = "成功";
                response.Url = finalUrl;
            }
            catch (Exception ex)
            {
                response.Result_code = Codes.SYSTEM_ERROR;
                response.Msg = "系統錯誤：" + ex.Message;
                response.Url = "";
            }

            return JsonConvert.SerializeObject(response);
        }
DLL_FACTORY:
    internal class FGetFunctionAndAccessUrl
    {
        // 環境設定
        internal readonly Dictionary<string, string> EnvironmentUrls = new Dictionary<string, string>
        {
            { "DEV", "http://localhost:53088" },
            { "TEST", "http://10.8.254.68/HI_APACCESS_TEST" },
            { "PROD", "http://10.8.254.68/HI_APACCESS" },
        };

        // 類型設定
        internal readonly Dictionary<string, string> TypeActions = new Dictionary<string, string>
        {
            { "1", "TokenEntry_FUNC" },
            { "2", "TokenEntry" }
        };

        // 取得授權系統清單（呼叫 FCommon）
        internal List<string> GetAuthorizedSystemsList(string environment)
        {
            return FCommon.GetAuthorizedSystemsList(environment);
        }

        // 產 JWT Token  10/30 增加群組
        internal string GenerateJwtToken(string systemId, string groupId)
        {
            var claims = new[]
            {
                new Claim("systemId", systemId),
                new Claim("groupId",  groupId  ?? string.Empty),
            };

            string SecretKey = "NpzedRHDaT8uSc10ntMJ+ohvUJ/VJYdHs1LyK3KP+Q0=";
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(SecretKey));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: "hi_ap_access_dll",
                audience: "hi_ap_access_web",
                claims: claims,
                expires: DateTime.Now.AddHours(1),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
AP:
    // 群組管理頁面
    public ActionResult GroupManagement(string systemId, string groupId)
    {
        if (string.IsNullOrEmpty(systemId))
        {
            systemId = Session["CurrentSystemId"]?.ToString();
            groupId = Session["CurrentGroupId"]?.ToString();
        }
        else
        {
            // 同步更新 Session
            Session["CurrentSystemId"] = systemId;
            Session["CurrentGroupId"] = groupId;
        }

        bool isFromInternalSite = Session["FromInternalSite"] != null && (bool)Session["FromInternalSite"];

        ViewBag.SystemId = systemId;
        ViewBag.Title = "群組權限管理 - " + systemId;
        ViewBag.ShowSwitchButton = isFromInternalSite; 

        return View();
    }
別站台呼叫DLL:
   // 權限管理導向 URL
   public ActionResult AP_ACCESS_SYS()
   {
       try
       {
           var req_para = new POSFILE_APPLY.Models.M_AP.GetUrlRequsetModel()
           {
               SysID = "HI_POSIMG",
               Type = "2" ,
               Environment = "DEV",
               GroupID = this.APG_NO
           };

           string json_input = JsonConvert.SerializeObject(req_para);
           string response = new HI_APACCESS_DLL.APACCESS().GetFunctionAndAccessUrl(json_input);
           POSFILE_APPLY.Models.M_AP.GetUrlResponseModel response_ = JsonConvert.DeserializeObject<POSFILE_APPLY.Models.M_AP.GetUrlResponseModel>(response);

           if (response_.Result_code == "0000")
           {
               string script = $@"
               <script>
                  window.open('{response_.Url}', '_blank');                       
                  window.location.href='{Url.Action("Main", "Home")}';
               </script>";
               return Content(script, "text/html");
           }
           else
           {
               return Content($"<script>alert('取得權限管理連結失敗：{response_.Msg}');</script>", "text/html");
           }
       }
       catch (Exception ex)
       {
           return Content($"<script>alert('導向權限管理系統發生錯誤：{ex.Message}');</script>", "text/html");
       }
   }
