Â•Ωüëå ÊàëÂπ´‰Ω†Êää ÂäüËÉΩ 1„ÄÅ2„ÄÅ3 ÁöÑÂÆåÊï¥ Models / Factory / SQL ÂÖ®ÈÉ®ÈÉΩÊï¥ÁêÜÂ•ΩÔºåÁÖßÊäÑÂ∞±ËÉΩË∑ë„ÄÇ

‚∏ª

üîπ ÂäüËÉΩ 1ÔºöGetAllUser (ÂèñÂæóÂÖ®ÈÉ®‰∫∫Âì°Ê∏ÖÂñÆ)

Request Model

namespace HI_APACCESS_DLL.Models
{
    public class GetAllUserModel
    {
        public class GetAllUserRequest
        {
            public string SysID { get; set; }
            public string Environment { get; set; }
        }

        public class ResultData
        {
            public string UserID { get; set; }
            public string UserName { get; set; }
        }

        public class GetAllUserResponse
        {
            public string Result_code { get; set; }
            public string Msg { get; set; }
            public List<ResultData> Result { get; set; }
        }
    }
}

Factory

using HI_APACCESS_DLL.Models;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetAllUser
    {
        internal GetAllUserModel.GetAllUserResponse Execute(string sysId, string environment)
        {
            var response = new GetAllUserModel.GetAllUserResponse();

            try
            {
                if (environment != "TEST" && environment != "PROD")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "Áí∞Â¢ÉÈåØË™§ÔºåÂè™Êé•Âèó TEST Êàñ PROD";
                    return response;
                }

                var resultList = new List<GetAllUserModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    string sql = @"
SELECT EMP_ID AS UserID,
       EMP_NAME AS UserName
FROM [HI_TMMAIN].[dbo].[AP_USER]
WHERE SYS_ID=@SysID
ORDER BY EMP_ID";

                    using (var cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetAllUserModel.ResultData
                                {
                                    UserID = reader["UserID"].ToString(),
                                    UserName = reader["UserName"].ToString()
                                });
                            }
                        }
                    }
                }

                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "Êü•ÁÑ°‰∫∫Âì°";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "ÊàêÂäü";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message;
            }

            return response;
        }
    }
}


‚∏ª

üîπ ÂäüËÉΩ 2Ôºö‰øÆÊîπ GetGroupAllUser (ÂõûÂÇ≥ UserName)

Request Model

namespace HI_APACCESS_DLL.Models
{
    public class GetGroupAllUserModel
    {
        public class GetGroupAllUserRequest
        {
            public string SysID { get; set; }
            public string GroupID { get; set; }
            public bool IsIncludeChildGroups { get; set; }
            public string Environment { get; set; }
        }

        public class ResultData
        {
            public string UserID { get; set; }
            public string UserName { get; set; }
        }

        public class GetGroupAllUserResponse
        {
            public string Result_code { get; set; }
            public string Msg { get; set; }
            public List<ResultData> Result { get; set; }
        }
    }
}

Factory

using HI_APACCESS_DLL.Models;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetGroupAllUser
    {
        internal GetGroupAllUserModel.GetGroupAllUserResponse Execute(string sysId, string groupId, bool isIncludeChildGroups, string environment)
        {
            var response = new GetGroupAllUserModel.GetGroupAllUserResponse();

            try
            {
                if (environment != "TEST" && environment != "PROD")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "Áí∞Â¢ÉÈåØË™§ÔºåÂè™Êé•Âèó TEST Êàñ PROD";
                    return response;
                }

                var resultList = new List<GetGroupAllUserModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    string sql = @"
SELECT u.EMP_ID AS UserID,
       u.EMP_NAME AS UserName
FROM [HI_TMMAIN].[dbo].[AP_USER_GROUP] g
INNER JOIN [HI_TMMAIN].[dbo].[AP_USER] u 
    ON g.EMP_ID = u.EMP_ID AND g.SYS_ID = u.SYS_ID
WHERE g.SYS_ID = @SysID
  AND g.APG_NO = @GroupID";

                    if (isIncludeChildGroups)
                    {
                        sql += @" OR g.APG_NO IN (
                                    SELECT ChildGroupID 
                                    FROM [HI_TMMAIN].[dbo].[AP_GROUP_RELATION] 
                                    WHERE ParentGroupID = @GroupID
                                 )";
                    }

                    using (var cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        cmd.Parameters.AddWithValue("@GroupID", groupId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetGroupAllUserModel.ResultData
                                {
                                    UserID = reader["UserID"].ToString(),
                                    UserName = reader["UserName"].ToString()
                                });
                            }
                        }
                    }
                }

                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "Êü•ÁÑ°Ê¨äÈôê";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "ÊàêÂäü";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message;
            }

            return response;
        }
    }
}


‚∏ª

üîπ ÂäüËÉΩ 3Ôºö‰øÆÊîπ GetTree (Â¢ûÂä† Memo)

Request Model

namespace HI_APACCESS_DLL.Models
{
    public class GetTreeModel
    {
        public class GetTreeRequest
        {
            public string SysID { get; set; }
            public string GroupID { get; set; }
            public string Environment { get; set; }
        }

        public class ResultData
        {
            public string FuncID { get; set; }
            public string FuncName { get; set; }
            public string ParentID { get; set; }
            public string Controller { get; set; }
            public string Action { get; set; }
            public int Sort { get; set; }
            public string Level { get; set; }
            public string Memo { get; set; } // Êñ∞Â¢û
        }

        public class GetTreeResponse
        {
            public string Result_code { get; set; }
            public string Msg { get; set; }
            public List<ResultData> Result { get; set; }
        }
    }
}

Factory

using HI_APACCESS_DLL.Models;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetTree
    {
        internal GetTreeModel.GetTreeResponse Execute(string sysId, string groupId, string environment)
        {
            var response = new GetTreeModel.GetTreeResponse();

            try
            {
                if (environment != "TEST" && environment != "PROD")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "Áí∞Â¢ÉÈåØË™§ÔºåÂè™Êé•Âèó TEST Êàñ PROD";
                    return response;
                }

                var resultList = new List<GetTreeModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    string sql = @"
SELECT DISTINCT
    CASE WHEN a.PARENT_ID = 'HOME' THEN '0'
         WHEN a.PARENT_ID <> 'HOME' THEN '1'
    END AS LEVEL,
    a.FUNC_ID,
    a.FUNC_NA,
    a.VIEW_H AS CONTROLLER,
    a.VIEW_HB AS ACTION,
    a.SORT_NO,
    a.PARENT_ID,
    a.MEMO
FROM [HI_TMMAIN].[dbo].[AP_FUNC] a
LEFT JOIN [HI_TMMAIN].[dbo].[AP_USER_FUNC_CONFIG] b 
    ON a.FUNC_ID = b.FUNC_ID
WHERE a.SYS_ID=@SysID 
  AND b.APG_NO=@GroupID
  AND a.IS_SHOW = 'Y'
ORDER BY a.SORT_NO";

                    using (var cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        cmd.Parameters.AddWithValue("@GroupID", groupId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetTreeModel.ResultData
                                {
                                    FuncID = reader["FUNC_ID"].ToString(),
                                    FuncName = reader["FUNC_NA"].ToString(),
                                    Controller = reader["CONTROLLER"].ToString(),
                                    Action = reader["ACTION"].ToString(),
                                    Sort = Convert.ToInt32(reader["SORT_NO"]),
                                    ParentID = reader["PARENT_ID"].ToString(),
                                    Level = reader["LEVEL"].ToString(),
                                    Memo = reader["MEMO"].ToString()
                                });
                            }
                        }
                    }
                }

                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "Êü•ÁÑ°Ê¨äÈôê";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "ÊàêÂäü";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message;
            }

            return response;
        }
    }
}


‚∏ª

Ë¶Å‰∏çË¶ÅÊàëÂÜçÂπ´‰Ω†ÊääÈÄô‰∏âÂÄã APACCESS Â§ñÂ±§ÂëºÂè´ÊñπÊ≥ï (APACCESS.cs) ‰πüË£ú‰∏äÔºü
ÂÉè GetAllUser(json)„ÄÅGetGroupAllUser(json)„ÄÅGetTree(json)ÔºåÈÄôÊ®£‰Ω†Âú® SVS ÂëºÂè´Â∞±‰∏çÁî®ÂÜçËá™Â∑±ÁµÑ Factory„ÄÇ
Â•Ωüëå ÈÇ£ÊàëÂπ´‰Ω†Êää APACCESS Â§ñÂ±§ÂëºÂè´ÊñπÊ≥ïÔºàAPACCESS.csÔºâ‰πüË£ú‰∏äÔºåËÆì‰Ω†Âú® SVS_Âì°Â∑•Âü∫Êú¨Ë≥áÊñô Êàñ SVS_ÂÆ¢Ë£ΩÂåñÂÖÉ‰ª∂ Áõ¥Êé•ÂëºÂè´ new APACCESS().XXX(json) Â∞±Â•ΩÔºå‰∏çÁî®Ëá™Â∑±ÁÆ° Factory„ÄÇ

‚∏ª

üîπ APACCESS.csÔºàÂ§ñÂ±§ÂëºÂè´Ôºâ

using HI_APACCESS_DLL.Factory;
using HI_APACCESS_DLL.Models;
using Newtonsoft.Json;
using System;

namespace HI_APACCESS_DLL
{
    public class APACCESS
    {
        /// <summary>
        /// ÂäüËÉΩ1 - ÂèñÂæóÂÖ®ÈÉ®‰∫∫Âì°Ê∏ÖÂñÆ
        /// </summary>
        public string GetAllUser(string json)
        {
            try
            {
                var req = JsonConvert.DeserializeObject<GetAllUserModel.GetAllUserRequest>(json);
                var res = new FGetAllUser().Execute(req.SysID, req.Environment);
                return JsonConvert.SerializeObject(res);
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject(new GetAllUserModel.GetAllUserResponse
                {
                    Result_code = Common.Codes.SYSTEM_ERROR,
                    Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message
                });
            }
        }

        /// <summary>
        /// ÂäüËÉΩ2 - ÂèñÂæóÁæ§ÁµÑ‰∫∫Âì°Ê∏ÖÂñÆ (ÂèØÂê´Â≠êÁæ§ÁµÑ)
        /// </summary>
        public string GetGroupAllUser(string json)
        {
            try
            {
                var req = JsonConvert.DeserializeObject<GetGroupAllUserModel.GetGroupAllUserRequest>(json);
                var res = new FGetGroupAllUser().Execute(req.SysID, req.GroupID, req.IsIncludeChildGroups, req.Environment);
                return JsonConvert.SerializeObject(res);
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject(new GetGroupAllUserModel.GetGroupAllUserResponse
                {
                    Result_code = Common.Codes.SYSTEM_ERROR,
                    Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message
                });
            }
        }

        /// <summary>
        /// ÂäüËÉΩ3 - ÂèñÂæóÊ®πÁãÄÂäüËÉΩÊ∏ÖÂñÆ
        /// </summary>
        public string GetTree(string json)
        {
            try
            {
                var req = JsonConvert.DeserializeObject<GetTreeModel.GetTreeRequest>(json);
                var res = new FGetTree().Execute(req.SysID, req.GroupID, req.Environment);
                return JsonConvert.SerializeObject(res);
            }
            catch (Exception ex)
            {
                return JsonConvert.SerializeObject(new GetTreeModel.GetTreeResponse
                {
                    Result_code = Common.Codes.SYSTEM_ERROR,
                    Msg = "Á≥ªÁµ±ÈåØË™§Ôºö" + ex.Message
                });
            }
        }
    }
}


‚∏ª

üîπ ‰ΩøÁî®ÁØÑ‰æã

ÂëºÂè´ÂäüËÉΩ 1ÔºöGetAllUser

var req = new GetAllUserModel.GetAllUserRequest
{
    SysID = "HI_POSIMG",
    Environment = "TEST"
};
string json_input = JsonConvert.SerializeObject(req);
string response = new APACCESS().GetAllUser(json_input);
var res = JsonConvert.DeserializeObject<GetAllUserModel.GetAllUserResponse>(response);


‚∏ª

ÂëºÂè´ÂäüËÉΩ 2ÔºöGetGroupAllUser

var req = new GetGroupAllUserModel.GetGroupAllUserRequest
{
    SysID = "HI_POSIMG",
    GroupID = "001",
    IsIncludeChildGroups = true,
    Environment = "TEST"
};
string json_input = JsonConvert.SerializeObject(req);
string response = new APACCESS().GetGroupAllUser(json_input);
var res = JsonConvert.DeserializeObject<GetGroupAllUserModel.GetGroupAllUserResponse>(response);


‚∏ª

ÂëºÂè´ÂäüËÉΩ 3ÔºöGetTree

var req = new GetTreeModel.GetTreeRequest
{
    SysID = "HI_POSIMG",
    GroupID = "001",
    Environment = "TEST"
};
string json_input = JsonConvert.SerializeObject(req);
string response = new APACCESS().GetTree(json_input);
var res = JsonConvert.DeserializeObject<GetTreeModel.GetTreeResponse>(response);


‚∏ª

üëâ ÈÄôÊ®£‰Ω†Â§ñÂ±§ÂëºÂè´ÁöÑÊñπÂºèË∑ü‰πãÂâçÂäüËÉΩ 5 / ÂäüËÉΩ 6 ÊòØ‰∏ÄËá¥ÁöÑÔºå
SVS_Âì°Â∑•Âü∫Êú¨Ë≥áÊñô Â∞±ÂèØ‰ª•‰πæ‰πæÊ∑®Ê∑®ÂëºÂè´Ôºå‰∏çÁî®ÂÜçÂãï Factory„ÄÇ

Ë¶Å‰∏çË¶ÅÊàëÈ†Ü‰æøÂπ´‰Ω†Êää SVS_Âì°Â∑•Âü∫Êú¨Ë≥áÊñô Ë£°Èù¢ ÂëºÂè´ÂäüËÉΩ 1„ÄÅ2„ÄÅ3 ÁöÑÊñ∞ÁâàÂØ´Ê≥ï‰πüÊï¥ÁêÜÁµ¶‰Ω†Ôºü