哦～我懂了，你是問 改版後的 SVS_員工基本資料 跟 SVS_客製化元件，要怎麼改成呼叫 DLL 的功能 1～5，對吧？
（之前你丟的是舊版 SVS_員工基本資料 + SVS_客製化元件，都自己打 SQL 查資料庫）

⸻

🔹新版設計重點
	1.	舊版問題
	•	SVS_員工基本資料：自己打 SQL 去抓 M1EMP_MAST / AP_USER。
	•	SVS_客製化元件：自己打 SQL 去檢查 AP_RFUNC / AP_USER_RFUNC_CONFIG。
	•	缺點：程式分散、SQL 依賴太重、不利維護。
	2.	新版做法
	•	改成呼叫 DLL（HI_APACCESS_DLL_FRAMEWORK.APACCESS）。
	•	功能 1：取使用者群組與名稱 → 取員工基本資料。
	•	功能 3：取樹狀清單 → 取功能清單 (Get_Tree)。
	•	功能 5：確認是否有按鈕權限 → 取按鈕權限。
	•	其他 SQL 就可以砍掉。

⸻

🔹新版 SVS_員工基本資料

👉 呼叫 功能 1 代替 Get_員工編號() 和 Get_員工基本資料()。

using HI_APACCESS_DLL_FRAMEWORK;
using Newtonsoft.Json;
using System;
using POSFILE_APPLY.Models; // 你可以在這邊放 Request/Response Model

namespace POSFILE_APPLY.Service
{
    public class SVS_員工基本資料
    {
        /// <summary>
        /// 取得員工基本資料 (透過 DLL 功能1)
        /// </summary>
        internal static M_AP.GetUserNameAndGroupResponseModel Get_員工基本資料(string sysId, string userAd, string environment)
        {
            var req = new M_AP.GetUserNameAndGroupRequestModel
            {
                SysID = sysId,
                UserAD = userAd,
                Environment = environment
            };

            string json_input = JsonConvert.SerializeObject(req);
            string response = new APACCESS().GetUserNameAndGroup(json_input);

            var res = JsonConvert.DeserializeObject<M_AP.GetUserNameAndGroupResponseModel>(response);
            return res;
        }

        /// <summary>
        /// 只取員工編號 (AD → 員編)
        /// </summary>
        internal static string Get_員工編號(string sysId, string userAd, string environment)
        {
            var empData = Get_員工基本資料(sysId, userAd, environment);
            return empData?.Result?.UserID; // DLL 功能1 已經幫你轉換好 AD → 員編
        }
    }
}


⸻

🔹新版 SVS_客製化元件

👉 呼叫 功能 5 代替 IfBtnAuth_Positive。

using HI_APACCESS_DLL_FRAMEWORK;
using Newtonsoft.Json;
using System.Web.Mvc;
using POSFILE_APPLY.Models;

namespace POSFILE_APPLY.Service
{
    public static class SVS_客製化元件
    {
        /// <summary>
        /// 新版 Hi_Btn - 使用 DLL 功能5 確認按鈕權限
        /// </summary>
        public static MvcHtmlString Hi_Btn(this HtmlHelper helper, string sysId, string groupId, string funcId, string buttonId, string buttonText, string buttonType, object htmlAttributes, string environment = "TEST")
        {
            // 呼叫 DLL 功能5
            var req = new M_AP.CheckBtnEnabledRequestModel
            {
                SysID = sysId,
                GroupID = groupId,
                FuncID = funcId,
                BtnID = buttonId,
                Environment = environment
            };

            string json_input = JsonConvert.SerializeObject(req);
            string response = new APACCESS().CheckBtnEnabled(json_input);
            var res = JsonConvert.DeserializeObject<M_AP.CheckBtnEnabledResponseModel>(response);

            if (res.Result) // 有權限才產生按鈕
            {
                TagBuilder tb = new TagBuilder("button");
                tb.SetInnerText(buttonText);
                tb.Attributes.Add("id", buttonId);
                tb.Attributes.Add("type", buttonType);

                if (htmlAttributes != null)
                {
                    var attrs = HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes);
                    tb.MergeAttributes(attrs);
                }

                return MvcHtmlString.Create(tb.ToString());
            }

            return null; // 沒權限 → 不顯示
        }
    }
}


⸻

🔹測試流程
	1.	在 SVS_員工基本資料：

var emp = SVS_員工基本資料.Get_員工基本資料("HI_POSIMG", "3B750", "TEST");
Console.WriteLine(emp.Result.UserName); // 王小明

✅ 會回傳員工資料。

	2.	在 SVS_客製化元件：

@Html.Hi_Btn("HI_POSIMG", "001", "POS1001", "BtnInsert", "新增", "button", new { @class="btn btn-primary" })

✅ 如果群組 001 有 BtnInsert 權限 → 產生按鈕，否則回傳 null（按鈕隱藏）。

⸻

要不要我幫你直接把 M_AP 的測試 Request/Response Model (功能1、功能5) 一起生出來？
這樣你 web 測試程式可以直接跑。