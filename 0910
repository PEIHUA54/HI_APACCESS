👌 明白了，你現在要改成 部分成功、部分失敗 的模式：
	1.	允許成功的筆數先寫入
	2.	失敗的筆數收集起來，顯示錯誤清單
	3.	最後顯示：成功 X 筆，失敗 Y 筆
	4.	成功的筆數要寫入資料庫，並刷新使用者清單

⸻

1. Controller

改動重點：
	•	message 改成「成功/失敗筆數」
	•	保留 errors 給前端顯示

[HttpPost]
public ActionResult ImportUsers(HttpPostedFileBase file, string apgNo)
{
    if (file == null || file.ContentLength == 0)
        return Json(new { success = false, message = "請選擇要匯入的Excel檔案" });

    if (string.IsNullOrWhiteSpace(apgNo))
        return Json(new { success = false, message = "請先選擇群組" });

    var ext = Path.GetExtension(file.FileName).ToLower();
    if (ext != ".xls" && ext != ".xlsx")
        return Json(new { success = false, message = "請上傳Excel檔案（.xls 或 .xlsx）" });

    var uploadDir = Server.MapPath("~/Upload");
    if (!Directory.Exists(uploadDir)) Directory.CreateDirectory(uploadDir);

    var safeName = $"Import_{apgNo}_{DateTime.Now:yyyyMMddHHmmss}{ext}";
    var uploadPath = PathValidator.GetSafePath(uploadDir, safeName);

    try
    {
        file.SaveAs(uploadPath);

        var service = GetAPService();
        var importResult = service.ImportUsersFromExcel(uploadPath, CurrentSystemId, apgNo, this.Emp_NO);

        string msg = $"成功 {importResult.SuccessCount} 筆，失敗 {importResult.ErrorMessages.Count} 筆";

        return Json(new
        {
            success = true, // ✅ 不管有錯誤還是成功都回 true，前端判斷用錯誤清單
            message = msg,
            errors = importResult.ErrorMessages.Select(e => new
            {
                RowNumber = e.RowNumber,
                EmpNo = e.EmpNo,
                Message = e.Message
            })
        });
    }
    catch (Exception ex)
    {
        return Json(new { success = false, message = "匯入過程發生錯誤：" + ex.Message });
    }
    finally
    {
        if (System.IO.File.Exists(uploadPath))
        {
            var fc = new F_Common();
            fc.SafeDeleteFile(uploadDir, safeName);
        }
    }
}


⸻

2. F_AP 方法

改動重點：
	•	不要在「有錯誤」時直接 return
	•	成功筆數累加
	•	失敗筆數收集到 ErrorMessages

public ImportResult ImportUsersFromExcel(string filePath, string sysId, string apgNo, string creator)
{
    ImportResult result = new ImportResult { ErrorMessages = new List<ImportError>() };

    try
    {
        var rows = new List<(int RowNumber, string EmpNo)>();

        // 讀 Excel
        using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
        using (var reader = ExcelReaderFactory.CreateReader(stream))
        {
            int rowIndex = 0;
            while (reader.Read())
            {
                rowIndex++;
                if (rowIndex == 1)
                {
                    string header = reader.GetString(0)?.Trim();
                    if (string.IsNullOrEmpty(header) || header != "員工編號")
                    {
                        result.IsSuccess = false;
                        result.ErrorMessage = "Excel 格式錯誤：第一列第一欄必須是「員工編號」";
                        return result;
                    }
                    continue;
                }

                string empNo = reader.GetValue(0)?.ToString().Trim();
                if (!string.IsNullOrEmpty(empNo))
                    rows.Add((rowIndex, empNo));
            }
        }

        if (rows.Count == 0)
        {
            result.IsSuccess = false;
            result.ErrorMessage = "Excel 無任何員工資料";
            return result;
        }

        int successCount = 0;

        using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnDB_TFS_HI_TMMAIN"].ConnectionString))
        {
            con.Open();

            foreach (var row in rows)
            {
                try
                {
                    // 檢查員工是否存在
                    string empName = null;
                    using (var cmd = new SqlCommand("SELECT EMP_NAME FROM VW_M1EMP_MAST WHERE EMP_NO=@EMP_NO", con))
                    {
                        cmd.Parameters.AddWithValue("@EMP_NO", row.EmpNo);
                        empName = cmd.ExecuteScalar() as string;
                    }

                    if (string.IsNullOrEmpty(empName))
                    {
                        result.ErrorMessages.Add(new ImportError { RowNumber = row.RowNumber, EmpNo = row.EmpNo, Message = "查無此員工" });
                        continue;
                    }

                    // 同群組檢查
                    using (var cmd = new SqlCommand("SELECT COUNT(1) FROM AP_USER WHERE SYS_ID=@SYS_ID AND APG_NO=@APG_NO AND U_ID=@U_ID", con))
                    {
                        cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                        cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                        cmd.Parameters.AddWithValue("@U_ID", row.EmpNo);
                        if ((int)cmd.ExecuteScalar() > 0)
                        {
                            result.ErrorMessages.Add(new ImportError { RowNumber = row.RowNumber, EmpNo = row.EmpNo, Message = "此群組已存在該員工" });
                            continue;
                        }
                    }

                    // 系統其他群組檢查
                    using (var cmd = new SqlCommand("SELECT COUNT(1) FROM AP_USER WHERE SYS_ID=@SYS_ID AND APG_NO<>@APG_NO AND U_ID=@U_ID", con))
                    {
                        cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                        cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                        cmd.Parameters.AddWithValue("@U_ID", row.EmpNo);
                        if ((int)cmd.ExecuteScalar() > 0)
                        {
                            result.ErrorMessages.Add(new ImportError { RowNumber = row.RowNumber, EmpNo = row.EmpNo, Message = "該系統其他群組已存在該員工" });
                            continue;
                        }
                    }

                    // 寫入
                    using (var cmd = new SqlCommand(@"
                        INSERT INTO AP_USER(SYS_ID,APG_NO,U_ID,U_NAME,CREATOR,CREATE_TIME)
                        VALUES(@SYS_ID,@APG_NO,@U_ID,@U_NAME,@CREATOR,GETDATE())", con))
                    {
                        cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                        cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                        cmd.Parameters.AddWithValue("@U_ID", row.EmpNo);
                        cmd.Parameters.AddWithValue("@U_NAME", empName);
                        cmd.Parameters.AddWithValue("@CREATOR", creator);
                        cmd.ExecuteNonQuery();
                        successCount++;
                    }
                }
                catch (Exception exRow)
                {
                    result.ErrorMessages.Add(new ImportError { RowNumber = row.RowNumber, EmpNo = row.EmpNo, Message = "寫入錯誤：" + exRow.Message });
                }
            }
        }

        result.SuccessCount = successCount;
        result.IsSuccess = true; // ✅ 不論有無錯誤，都回 true，前端自己顯示錯誤清單
    }
    catch (Exception ex)
    {
        result.IsSuccess = false;
        result.ErrorMessage = "處理 Excel 匯入時發生錯誤：" + ex.Message;
    }

    return result;
}


⸻

3. JS

改動重點：
	•	成功和錯誤同時顯示
	•	顯示「成功 X 筆，失敗 Y 筆」
	•	成功仍然會刷新使用者清單

$("#importForm").submit(function (e) {
    e.preventDefault();
    var formData = new FormData(this);

    $("#uploadProgress").removeClass("d-none");
    $(".progress-bar").css("width", "50%");

    $.ajax({
        url: '@Url.Action("ImportUsers", "AP")',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (res) {
            $("#uploadProgress").addClass("d-none");
            $(".progress-bar").css("width", "0%");

            // 顯示成功訊息
            $("#successMessage").text(res.message);
            $("#successSection").removeClass("d-none");

            // 清空錯誤表格
            $("#errorTable tbody").empty();

            if (res.errors && res.errors.length > 0) {
                $("#errorSection").removeClass("d-none");
                res.errors.forEach(err => {
                    $("#errorTable tbody").append(
                        `<tr class="table-danger">
                            <td>${err.RowNumber}</td>
                            <td>${err.EmpNo}</td>
                            <td>${err.Message}</td>
                        </tr>`
                    );
                });
            } else {
                $("#errorSection").addClass("d-none");
            }

            // ✅ 刷新使用者區塊
            loadUsers();
        },
        error: function () {
            $("#uploadProgress").addClass("d-none");
            $(".progress-bar").css("width", "0%");
            alert("伺服器發生錯誤，請稍後再試。");
        }
    });
});


⸻

這樣修改後：
	•	會「部分成功」插入 DB
	•	前端會顯示 成功 X 筆，失敗 Y 筆
	•	失敗的筆數會在錯誤表格中列出
	•	成功筆數會立即反應在 管理使用者清單

⸻

要不要我再幫你把 View 的錯誤清單表格樣式（紅框、動畫）套好？