   //2 取得群組人員清單
   public string GetGroupAllUser(string requestJson)
   {
       var response = new GetGroupAllUserModel.GetGroupAllUserResponse();

       try
       {
           var request = JsonConvert.DeserializeObject<GetGroupAllUserModel.GetGroupAllUserRequest>(requestJson);
           FGetGroupAllUser func = new FGetGroupAllUser();
           response = func.Execute(request.SysID, request.GroupID, request.IsIncludeChildGroups, request.Environment);
       }
       catch (Exception ex)
       {
           response = new GetGroupAllUserModel.GetGroupAllUserResponse
           {
               Result_code = Common.Codes.SYSTEM_ERROR,
               Msg = "系統錯誤：" + ex.Message
           };
       }

       return JsonConvert.SerializeObject(response);
   }

 //7 GetAllUser(取得全部人員清單)
       
--------

using HI_APACCESS_DLL.Models;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetGroupAllUser
    {
        internal GetGroupAllUserModel.GetGroupAllUserResponse Execute(string sysId, string groupId, bool isIncludeChildGroups, string environment)
        {
            var response = new GetGroupAllUserModel.GetGroupAllUserResponse();

            try
            {
                // 1. 環境檢查
                if (environment != "TEST" && environment != "PROD")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "環境錯誤，只接受 TEST 或 PROD";
                    return response;
                }

                // 2. 系統授權檢查
                var authorizedSystems = FCommon.GetAuthorizedSystemsList(environment);
                if (!authorizedSystems.Contains(sysId))
                {
                    response.Result_code = Common.Codes.SYS_UNAUTHORIZED;
                    response.Msg = "系統未授權";
                    return response;
                }

                var userList = new List<string>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    // 3. 如果包含子群組，先把所有群組ID取出
                    var groupIds = new List<string> { groupId };

                    if (isIncludeChildGroups)
                    {
                        string sqlChild = @"SELECT APG_NO FROM [HI_TMMAIN].[dbo].[AP_GROUP] 
                                            WHERE SYS_ID=@SysID AND PARENT_APG_NO=@GroupID";
                        using (SqlCommand cmd = new SqlCommand(sqlChild, conn))
                        {
                            cmd.Parameters.AddWithValue("@SysID", sysId);
                            cmd.Parameters.AddWithValue("@GroupID", groupId);
                            using (var reader = cmd.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    groupIds.Add(reader["APG_NO"].ToString());
                                }
                            }
                        }
                    }

                    // 4. 查詢所有這些群組的使用者
                    string sqlUser = @"SELECT DISTINCT U_ID 
                                       FROM [HI_TMMAIN].[dbo].[AP_USER] 
                                       WHERE SYS_ID=@SysID AND APG_NO IN ({0})";

                    // 動態組 IN 子句
                    var parameters = new List<string>();
                    for (int i = 0; i < groupIds.Count; i++)
                    {
                        parameters.Add($"@Group{i}");
                    }
                    sqlUser = string.Format(sqlUser, string.Join(",", parameters));

                    using (SqlCommand cmd = new SqlCommand(sqlUser, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        for (int i = 0; i < groupIds.Count; i++)
                        {
                            cmd.Parameters.AddWithValue($"@Group{i}", groupIds[i]);
                        }

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                userList.Add(reader["U_ID"].ToString());
                            }
                        }
                    }
                }

                // 5. 結果判斷
                if (userList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "查無權限";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "成功";
                    response.Result = new GetGroupAllUserModel.ResultData
                    {
                        UserIDList = userList
                    };
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "系統錯誤：" + ex.Message;
            }

            return response;
        }
    }
}


using HI_APACCESS_DLL.Models;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetTree
    {
        internal GetTreeModel.GetTreeResponse Execute(string sysId, string groupId, string environment)
        {
            var response = new GetTreeModel.GetTreeResponse();

            try
            {
                // 1. 環境檢查
                if (environment != "TEST" && environment != "PROD")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "環境錯誤，只接受 TEST 或 PROD";
                    return response;
                }

                // 2. 系統授權檢查
                var authorizedSystems = FCommon.GetAuthorizedSystemsList(environment);
                if (!authorizedSystems.Contains(sysId))
                {
                    response.Result_code = Common.Codes.SYS_UNAUTHORIZED;
                    response.Msg = "系統未授權";
                    return response;
                }

                var resultList = new List<GetTreeModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    // 3. 查詢功能清單
                    string sql = @"
SELECT DISTINCT
    CASE WHEN a.PARENT_ID = 'HOME' THEN '0'
         WHEN a.PARENT_ID <> 'HOME' THEN '1'
    END AS LEVEL,
    a.FUNC_ID,
    a.FUNC_NA,
    a.VIEW_H AS CONTROLLER,
    a.VIEW_HB AS ACTION,
    a.SORT_NO,
    a.PARENT_ID
FROM [HI_TMMAIN].[dbo].[AP_FUNC] a
LEFT JOIN [HI_TMMAIN].[dbo].[AP_USER_FUNC_CONFIG] b 
    ON a.FUNC_ID = b.FUNC_ID 
    AND a.sys_id= b.sys_id 
WHERE a.SYS_ID=@SysID 
  AND b.APG_NO=@GroupID
  AND a.IS_SHOW='Y'
ORDER BY a.SORT_NO
";

                    using (SqlCommand cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        cmd.Parameters.AddWithValue("@GroupID", groupId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetTreeModel.ResultData
                                {
                                    FuncID = reader["FUNC_ID"].ToString(),
                                    FuncName = reader["FUNC_NA"].ToString(),
                                    Controller = reader["CONTROLLER"].ToString(),
                                    Action = reader["ACTION"].ToString(),
                                    Sort = Convert.ToInt32(reader["SORT_NO"]),
                                    ParentID = reader["PARENT_ID"].ToString(),
                                    Level = reader["LEVEL"].ToString()
                                });
                            }
                        }
                    }
                }

                // 4. 結果判斷
                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "查無權限";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "成功";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "系統錯誤：" + ex.Message;
            }

            return response;
        }
    }
}
