好問題 👍
你現在的需求是：
	•	TEST → 用測試的 DB 連線字串 (例如 Hilife-tfs, HI_APLOG)
	•	PROD → 用正式的 DB 連線字串 (例如 localhost, Possc, sa)

所以我們要在 FCommon.BuildConnectionString() 裡面判斷 傳進來的 environment，然後給不同的 SqlConnectionStringBuilder。

⸻

📌 修改後的 FCommon

using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace HI_APACCESS_DLL_FRAMEWORK.Factory
{
    internal static class FCommon
    {
        /// <summary>
        /// 建立 SQL 連線字串 (依照環境不同切換)
        /// </summary>
        internal static string BuildConnectionString(string environment)
        {
            SqlConnectionStringBuilder csb;

            if (environment == "TEST")
            {
                // 測試環境連線字串
                csb = new SqlConnectionStringBuilder
                {
                    DataSource = "Hilife-tfs",
                    InitialCatalog = "HI_APLOG",
                    PersistSecurityInfo = true,
                    TrustServerCertificate = true,
                    UserID = "pos",
                    Password = "pos1",
                    Encrypt = true
                };
            }
            else if (environment == "PROD")
            {
                // 正式環境連線字串
                csb = new SqlConnectionStringBuilder
                {
                    DataSource = "localhost",
                    InitialCatalog = "Possc",
                    PersistSecurityInfo = true,
                    TrustServerCertificate = true,
                    UserID = "sa",
                    Password = "你的正式密碼", // ⚠ 請換成正式的密碼
                    Encrypt = true
                };
            }
            else
            {
                throw new ArgumentException("環境參數錯誤，只接受 TEST 或 PROD");
            }

            return csb.ConnectionString;
        }

        /// <summary>
        /// 取得授權系統清單（需傳入環境參數）
        /// </summary>
        internal static List<string> GetAuthorizedSystemsList(string environment)
        {
            string sql = "SELECT [SYS_ID] FROM [HI_TMMAIN].[dbo].[AP_SYS]";
            var systemIds = new List<string>();

            try
            {
                using (SqlConnection conn = new SqlConnection(BuildConnectionString(environment)))
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    conn.Open();
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            systemIds.Add(reader["SYS_ID"].ToString());
                        }
                    }
                }
            }
            catch
            {
                // DB 掛掉時回傳預設清單
                return new List<string> { "HI_POS", "HI_POSIMG", "POS_LOG" };
            }

            return systemIds;
        }
    }
}


⸻

📌 Factory 呼叫方式要改

原本：

using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString()))

要改成傳環境進去：

using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))

同理，呼叫授權系統清單的地方也要改：

var authorizedSystems = FCommon.GetAuthorizedSystemsList(environment);


⸻

✅ 好處

這樣你的程式可以：
	•	TEST → 連到測試 DB
	•	PROD → 連到正式 DB
	•	其他字串 → 直接丟 Exception (環境參數錯誤，只接受 TEST 或 PROD)

⸻

要不要我幫你把 功能 1 的 Factory 改成新版，直接用 FCommon.BuildConnectionString(environment)，讓你可以測試兩個環境切換？