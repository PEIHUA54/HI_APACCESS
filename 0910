using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System;
using System.Web.Mvc;

namespace HI_APACCESS.Service.Validation
{
    public class TokenAuthorizeAttribute : ActionFilterAttribute
    {
        private static readonly string SecretKey = "NpzedRHDaT8uSc10ntMJ+ohvUJ/VJYdHs1LyK3KP+Q0=";
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var token = filterContext.HttpContext.Request.QueryString["token"];
            if (string.IsNullOrEmpty(token))
            {
                filterContext.Result = new HttpStatusCodeResult(401, "Missing token");
                return;
            }

            var principal = ValidateToken(token);
            if (principal == null)
            {
                filterContext.Result = new HttpStatusCodeResult(401, "Invalid or expired token");
                return;
            }

            filterContext.HttpContext.User = principal;
            base.OnActionExecuting(filterContext);
        }

        public static ClaimsPrincipal ValidateToken(string token)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(SecretKey);

            var parameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidIssuer = "hi_ap_access_dll",
                ValidAudience = "hi_ap_access_web",
                ValidateLifetime = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ClockSkew = TimeSpan.Zero
            };

            try
            {
                var principal = tokenHandler.ValidateToken(token, parameters, out SecurityToken validatedToken);
                return principal;
            }
            catch
            {
                return null;
            }
        }
    }
}
