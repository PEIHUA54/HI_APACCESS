完美 👍，你這份 PageManagement 已經結構完整，我幫你加上「頁面類型 FUNC_TYPE」的整合：
👉 包含：
	1.	後端傳回 FUNC_TYPE 資料的接收
	2.	Modal 中新增欄位（下拉選單 1:Tree, 2:PartialView）
	3.	新增與修改時帶入 FUNC_TYPE
	4.	檢查必填
	5.	子頁面在列表顯示不同底色：
  Tree → 綠色 #DFFFD6
  PartialView → 淺藍 #E8F5FD

⸻

✅ 一、在 Modal 新增 FUNC_TYPE 欄位

請在你的 Modal 中 的這段：

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="isShow">是否顯示</label>
            <select class="form-control" id="isShow">
                <option value="Y">是</option>
                <option value="N">否</option>
            </select>
        </div>
    </div>

上方 插入以下新欄位 👇：

<div class="col-md-6">
    <div class="form-group">
        <label for="funcType">頁面類型 <span class="text-danger">*</span></label>
        <select class="form-control" id="funcType" required>
            <option value="1">1 - Tree</option>
            <option value="2">2 - PartialView</option>
        </select>
    </div>
</div>

✅ 這樣 Modal 顯示順序為：
上層ID / 頁面名稱 / Controller / Action / 頁面類型 / 是否顯示 / 備註

⸻

✅ 二、在 JS 中加入 FUNC_TYPE 處理邏輯

(1) openPageModal()

function openPageModal() {
    isPageEditMode = false;
    $('#pageModalTitle').text('新增頁面');
    $('#pageForm')[0].reset();
    $('#isShow').val('Y');
    $('#funcId').prop('readonly', false).css('background-color', '#ffffff');
    $('#viewH').val('');
    $('#viewHB').val('');
    $('#funcType').val('1'); // 預設為 Tree

    loadParentPageOptions();
    $('#pageModal').modal('show');
}


⸻

(2) editPage(funcId)

在載入資料後加入：

$('#funcType').val(page.FUNC_TYPE || '1');

修改後版本（節錄）：

if (page) {
    $('#funcId').val(page.FUNC_ID).prop('readonly', false);
    $('#funcName').val(page.FUNC_NA);
    $('#sortNo').val(page.SORT_NO || '');
    $('#isShow').val(page.IS_SHOW || 'Y');
    $('#memo').val(page.MEMO || '');
    $('#viewH').val(page.VIEW_H || '');
    $('#viewHB').val(page.VIEW_HB || '');
    $('#funcType').val(page.FUNC_TYPE || '1'); // 新增


⸻

(3) savePage()

在組合 formData 時加入 FUNC_TYPE：

const funcType = ($('#funcType').val() || '').trim();

if (!funcType) {
    alert('請選擇頁面類型');
    return;
}

const formData = {
    FUNC_ID: funcId,
    FUNC_NA: funcName,
    PARENT_ID: parentId || null,
    SORT_NO: sortNo,
    IS_SHOW: isShow,
    MEMO: memo,
    VIEW_H: viewH === '' ? null : viewH,
    VIEW_HB: viewHB === '' ? null : viewHB,
    FUNC_TYPE: funcType // 新增
};


⸻

✅ 三、在 renderPageListHierarchical() 顯示不同底色

找到這一段：

// 顯示其子頁面
const children = childPages.filter(c => c.PARENT_ID === parentPage.FUNC_ID);
children.forEach(function (childPage, childIndex) {
    html += renderPageItem(childPage, true, childIndex, children.length, parentPage.FUNC_ID);
});

不改這裡，而在 renderPageItem() 中加入底色邏輯。

在 return HTML 之前加這段（在 function 開頭區段）：

let bgStyle = '';
if (isChild) {
    if (page.FUNC_TYPE === '1') {
        bgStyle = 'background-color:#DFFFD6;'; // 綠色 tree
    } else if (page.FUNC_TYPE === '2') {
        bgStyle = 'background-color:#E8F5FD;'; // 淺藍 partialview
    }
}

然後修改原本回傳 HTML 的最外層 <div class="page-item ..."> 加上 style：

return `
<div class="page-item ${selectedClass} ${hierarchyClass} ${hiddenClass}"
     style="${bgStyle}"
     onclick="selectPage('${page.FUNC_ID}', '${page.FUNC_NA}', ${isChild})">


⸻

✅ 四、後端 FuncModel 已經加過 FUNC_TYPE (前面教過)

Controller 不用改，因為 model 綁自動帶 FUNC_TYPE。

⸻

✅ 五、完成後效果

頁面層級	FUNC_TYPE	顏色	備註
父頁面	—	淺藍（原樣）	不變
子頁面 (Tree)	1	淡綠 #DFFFD6	功能主畫面
子頁面 (PartialView)	2	淺藍 #E8F5FD	嵌入頁面/Modal 類


⸻

是否要我幫你加上 Modal 裡 FUNC_TYPE 的「下拉中文顯示」改成更明顯（例如「Tree 結構頁」「PartialView 部分頁」），
並讓修改時在畫面上自動顯示對應底色預覽？

非常好 👍
你的 GroupManagement 前端架構我完全看懂了，
我們要在「頁面權限清單」那邊（renderPageListHierarchical() / renderPageItem()）
根據 FUNC_TYPE 來做顏色區別（例如 Tree=綠、PartialView=藍），
這樣在群組管理畫面也能一眼分辨不同頁面類型。

⸻

✅ 修改重點

我們只需要動到兩個地方：

(1) 在 renderPageItem() 中加上底色判斷

找到原始的：

function renderPageItem(func, isChild) {
    const funcId = getFuncId(func);
    const funcName = getFuncName(func);

    const hasPermission = groupPermissions[funcId] && groupPermissions[funcId].hasPagePermission;
    const checkedAttr = hasPermission ? 'checked' : '';

    // 判斷是否為父層頁面並添加相應樣式
    const isParent = isParentPage(func);
    let itemClass = hasPermission ? 'page-item has-permission' : 'page-item';
    if (isParent) {
        itemClass += ' parent-page';
    }

    const childClass = isChild ? 'child-page-item' : '';

👉 在這段後面加入：

    // 根據 FUNC_TYPE 決定底色
    let bgStyle = '';
    if (func.FUNC_TYPE === '1') {
        bgStyle = 'background-color:#DFFFD6;'; // Tree → 淡綠
    } else if (func.FUNC_TYPE === '2') {
        bgStyle = 'background-color:#E8F5FD;'; // PartialView → 淺藍
    }

然後在回傳的 HTML 裡，把外層 <div> 加上 style="${bgStyle}"：

return `
    <div class="${itemClass} ${childClass}" data-func-id="${funcId}"
         style="${bgStyle}"
         onclick="togglePagePermissionByClick('${funcId}')">
        <div class="permission-content">
            <input type="checkbox" class="permission-checkbox" ${checkedAttr}>
            <span class="permission-title">${funcName}</span>
            <span class="permission-info">頁面ID: ${funcId}</span>
        </div>
    </div>`;


⸻

(2) 確保 FUNC_TYPE 從後端有被撈出

在 loadAllFunctions() 中，後端回傳的 response.data 應該已包含 FUNC_TYPE（如果你之前已經在 AP_FUNC 加了那個欄位）。
不需修改這段，但你可以驗證看看 Console log：

console.log(`${index}: ${f.FUNC_ID} - ${f.FUNC_NA} (Type: ${f.FUNC_TYPE}, Parent: ${f.PARENT_ID})`);

確認有印出 Type=1/2 即可。

⸻

✅ 顏色效果一覽

類型	FUNC_TYPE	顏色	意義
Tree	1	淡綠 #DFFFD6	樹狀主要頁面
PartialView	2	淺藍 #E8F5FD	嵌入子頁面


⸻

✅ 完成後效果
群組權限頁 → 左側頁面清單
	•	Tree 類型子頁會顯示淡綠色底。
	•	PartialView 類型子頁會顯示淡藍色底。
	•	父層（Home 層）保持原樣。

⸻

是否希望我幫你加一個 legend（小提示）在頁面上方，例如顯示：

🟩 Tree 頁面 🟦 PartialView 頁面
這樣方便辨識？