HI_APACCESS : HOME兩個入口需要檢查TOKEN是否失效 如果失效跳畫面為TOKEN已失效
 [HttpGet]
 [TokenAuthorize]
 public ActionResult TokenEntry()
 {
     var systemId = ((ClaimsPrincipal)User).FindFirst("systemId")?.Value;
     var empNo = ((ClaimsPrincipal)User).FindFirst("empNo")?.Value;

     Session["CurrentSystemId"] = systemId;
     Session["CurrentEmpNo"] = empNo;
    
     // 導向到群組管理
     return RedirectToAction("GroupManagement", "AP", new { systemId = systemId });
 }


 [HttpGet]
 [TokenAuthorize]
 public ActionResult TokenEntry_FUNC()
 {
     var systemId = ((ClaimsPrincipal)User).FindFirst("systemId")?.Value;
     var empNo = ((ClaimsPrincipal)User).FindFirst("empNo")?.Value;

     Session["CurrentSystemId"] = systemId;
     Session["CurrentEmpNo"] = empNo;

     // 導向到頁面管理
     return RedirectToAction("PageManagement", "AP", new { systemId = systemId });
 }

// 產 JWT Token
internal string GenerateJwtToken(string systemId)
{
    var claims = new[]
    {
        new Claim("systemId", systemId),
    };

    string SecretKey = "NpzedRHDaT8uSc10ntMJ+ohvUJ/VJYdHs1LyK3KP+Q0=";

    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(SecretKey));
    var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

    var token = new JwtSecurityToken(
        issuer: "hi_ap_access_dll",
        audience: "hi_ap_access_web",
        claims: claims,
        expires: DateTime.Now.AddHours(1),
        signingCredentials: creds
    );

    return new JwtSecurityTokenHandler().WriteToken(token);
}
