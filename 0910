using HI_APACCESS_DLL.Models;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetTree
    {
        internal GetTreeModel.GetTreeResponse Execute(string sysId, string groupId, string environment, bool onlyIsShow)
        {
            var response = new GetTreeModel.GetTreeResponse();

            try
            {
                // 1. 環境檢查
                if (environment != "TEST" && environment != "PROD" && environment != "DEV")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "環境錯誤，只接受 TEST 或 PROD";
                    return response;
                }

                // 2. 系統授權檢查
                var authorizedSystems = FCommon.GetAuthorizedSystemsList(environment);
                if (!authorizedSystems.Contains(sysId))
                {
                    response.Result_code = Common.Codes.SYS_UNAUTHORIZED;
                    response.Msg = "系統未授權";
                    return response;
                }

                var resultList = new List<GetTreeModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    // 3. 查詢功能清單
                    string sql = @"
SELECT DISTINCT
    CASE WHEN a.PARENT_ID = 'HOME' THEN '0'
         WHEN a.PARENT_ID <> 'HOME' THEN '1'
    END AS LEVEL,
    a.FUNC_ID,
    a.FUNC_NA,
    a.VIEW_H AS CONTROLLER,
    a.VIEW_HB AS ACTION,
    a.SORT_NO,
    a.PARENT_ID,
    a.MEMO
FROM [HI-AUTOS].[dbo].[AP_FUNC] a
LEFT JOIN [HI-AUTOS].[dbo].[AP_USER_FUNC_CONFIG] b 
    ON a.FUNC_ID = b.FUNC_ID 
    AND a.sys_id= b.sys_id 
WHERE a.SYS_ID=@SysID 
  AND b.APG_NO=@GroupID
  AND a.IS_SHOW='Y'
ORDER BY a.SORT_NO
";

                    using (SqlCommand cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        cmd.Parameters.AddWithValue("@GroupID", groupId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetTreeModel.ResultData
                                {
                                    FuncID = reader["FUNC_ID"].ToString(),
                                    FuncName = reader["FUNC_NA"].ToString(),
                                    Controller = reader["CONTROLLER"].ToString(),
                                    Action = reader["ACTION"].ToString(),
                                    Sort = Convert.ToInt32(reader["SORT_NO"]),
                                    ParentID = reader["PARENT_ID"].ToString(),
                                    Level = reader["LEVEL"].ToString(),
                                    Memo = reader["MEMO"].ToString()
                                });
                            }
                        }
                    }
                }

                // 4. 結果判斷
                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "查無權限";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "成功";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "系統錯誤：" + ex.Message;
            }

            return response;
        }
    }
}
