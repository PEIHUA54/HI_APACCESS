using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Data.SqlClient;
using System.Data;
using HI_APACCESS_DLL_FRAMEWORK.Factory;
using HI_APACCESS_DLL_FRAMEWORK.Models;

namespace HI_APACCESS_DLL_FRAMEWORK
{
    public static class APACCESS
    {
        public static string GetFunctionAndAccessUrl(string Request_)
        {
            FGetFunctionAndAccessUrl func = new FGetFunctionAndAccessUrl();
            var response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse();
            try
            {
                GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlRequest request = JsonConvert.DeserializeObject<GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlRequest>(Request_);

                // 檢查類型是否正確
                if (!func.TypeActions.ContainsKey(request.Type))
                {
                    response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse
                    {
                        Result_code = "1002",
                        Msg = "類型錯誤，只接受 1 或 2",
                        Url = ""
                    };
                    return JsonConvert.SerializeObject(response);
                }

                // 檢查環境是否正確
                if (!func.EnvironmentUrls.ContainsKey(request.Environment))
                {
                    response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse
                    {
                        Result_code = "1003",
                        Msg = "環境錯誤，只接受 TEST、PROD",
                        Url = ""
                    };
                    return JsonConvert.SerializeObject(response);
                }

                // 檢查系統權限 (不在清單內無權限)
                var authorizedSystems = func.GetAuthorizedSystemsList();
                if (!authorizedSystems.Contains(request.SysID))
                {
                    response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse
                    {
                        Result_code = "0001",
                        Msg = "查無權限",
                        Url = ""
                    };
                    return JsonConvert.SerializeObject(response);
                }

                // 產生 JWT Token
                string token = func.GenerateJwtToken(request.SysID);

                // 組合最終 URL（含 Token）
                string baseUrl = func.EnvironmentUrls[request.Environment];
                string action = func.TypeActions[request.Type];
                string finalUrl = $"{baseUrl}/Home/{action}?token={token}";

                // 回傳成功結果
                response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse
                {
                    Result_code = "0000",
                    Msg = "成功",
                    Url = finalUrl
                };
                return JsonConvert.SerializeObject(response);
            }
            catch (Exception ex)
            {
                response = new GetFunctionAndAccessUrlModel.GetFunctionAndAccessUrlResponse
                {
                    Result_code = "9999",
                    Msg = "系統錯誤：" + ex.Message,
                    Url = ""
                };
                return JsonConvert.SerializeObject(response);
            }
        }
    }
}
FACTORY:
using System.Data.SqlClient;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace HI_APACCESS_DLL_FRAMEWORK.Factory
{
    internal class FGetFunctionAndAccessUrl
    {  // 環境設定
        internal readonly Dictionary<string, string> EnvironmentUrls = new Dictionary<string, string>
        {
            //{ "TEST", "http:// 10.8.254.68/ HI_APACCESS_TEST" },
            { "TEST", "http://localhost:53088" },
            { "PROD", "http://10.8.254.68/HI_APACCESS_PROD" },
        };

        // 類型設定
        internal readonly Dictionary<string, string> TypeActions = new Dictionary<string, string>
        {
            { "1", "TokenEntry_FUNC" },  // 頁面&按鈕設定
            { "2", "TokenEntry" }        // 權限設定
        };

        // sql連線字串
        internal static string BuildConnectionString()
        {
            var csb = new SqlConnectionStringBuilder
            {
                DataSource = "Hilife-tfs",
                InitialCatalog = "HI_APLOG",
                PersistSecurityInfo = true,
                TrustServerCertificate = true,
                UserID = "pos",
                Password = "pos1",
                Encrypt = true
            };
            return csb.ConnectionString;
        }

        // 取得授權系統清單sql
        internal List<string> GetAuthorizedSystemsList()
        {
            string sql = "SELECT [SYS_ID] FROM [HI_TMMAIN].[dbo].[AP_SYS]";
            var systemIds = new List<string>();

            try
            {
                using (SqlConnection conn = new SqlConnection(BuildConnectionString()))
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    conn.Open();
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            systemIds.Add(reader["SYS_ID"].ToString());
                        }
                    }
                }
                return systemIds;
            }
            catch (Exception ex)
            {
                return new List<string> { "HI_POS", "HI_POSIMG", "POS_LOG" };
            }
        }

        /// 產生 JWT Token
        internal string GenerateJwtToken(string systemId)
        {
            var claims = new[]
            {
            new Claim("systemId", systemId),
        };

            string SecretKey = "NpzedRHDaT8uSc10ntMJ+ohvUJ/VJYdHs1LyK3KP+Q0=";

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(SecretKey));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: "hi_ap_access_dll",
                audience: "hi_ap_access_web",
                claims: claims,
                expires: DateTime.Now.AddHours(1),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

    }
}
MODEL:
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HI_APACCESS_DLL_FRAMEWORK.Models
{
    internal class GetFunctionAndAccessUrlModel
    {
        // 請求參數
        internal class GetFunctionAndAccessUrlRequest
        {
            [JsonProperty]
            [DisplayName("系統ID")]
            internal string SysID { get; set; }        // 系統ID
            [JsonProperty]
            [DisplayName("類型")]
            internal string Type { get; set; }          // 1=頁面設定, 2=權限設定
            [JsonProperty]
            [DisplayName("環境")]
            internal string Environment { get; set; }   // TEST=測試, PROD=正式
        }

        // 回應結果
        internal class GetFunctionAndAccessUrlResponse
        {
            [JsonProperty]
            [DisplayName("回覆代碼")]
            internal string Result_code { get; set; }     // 結果代碼
            [JsonProperty]
            [DisplayName("訊息")]
            internal string Msg { get; set; }  // 訊息
            [JsonProperty]
            [DisplayName("功能連結")]
            internal string Url { get; set; }      // 功能連結
        }
    }
}

