👌 看了你給的 response 範例，我懂了。
你的 API response 是長這樣的：

{
  "Result_code": "0000",
  "Msg": "成功",
  "Result": {
    "UserID": "3A001",
    "UserName": "王小明",
    "GroupID": "001",
    "GroupName": "管理員(資訊)",
    "ParentGroupID": [ "003", "002" ],
    "ChildGroupID": [ "004", "005" ],
    "SensitiveDataAccess": false,
    "OrganName": "程式課",
    "PostName": "高級專員"
  }
}

👉 所以結論是：
	•	ParentGroupID / ChildGroupID 必須是 真正的陣列 (List<string>)，而不是 JSON 文字或 STRING_AGG。
	•	也就是說 SQL 不要用 FOR JSON PATH，而是回傳多筆記錄，程式端再轉成 List<string>。

⸻

✅ 正確 SQL 寫法（改回多筆）

-- 先找使用者群組
WITH UserGroups AS (
    SELECT U.APG_NO, U.U_ID, U.U_NAME
    FROM [HI_TMMAIN].[dbo].[AP_USER] U
    WHERE U.SYS_ID=@SysID AND U.U_ID=@UserAD
)
SELECT DISTINCT
    UG.U_ID AS UserID,
    UG.U_NAME AS UserName,
    G.APG_NO AS GroupID,
    G.APG_NAME AS GroupName,
    G.PARENT_APG_NO AS ParentGroupID,
    G.SENSITIVE_DATA_ACCESS AS SensitiveDataAccess,
    M.ORGAN_CAP AS OrganName,
    M.POST_NAME AS PostName
FROM UserGroups UG
INNER JOIN [HI_TMMAIN].[dbo].[AP_GROUP] G 
    ON UG.APG_NO = G.APG_NO AND G.SYS_ID=@SysID
LEFT JOIN [VW_M1EMP_MAST] M 
    ON UG.U_ID = M.EMP_NO;

子群組另外查：

SELECT APG_NO
FROM [HI_TMMAIN].[dbo].[AP_GROUP]
WHERE SYS_ID=@SysID AND PARENT_APG_NO=@GroupID;

母群組另外查：

SELECT PARENT_APG_NO
FROM [HI_TMMAIN].[dbo].[AP_GROUP]
WHERE SYS_ID=@SysID AND APG_NO=@GroupID AND PARENT_APG_NO IS NOT NULL;


⸻

✅ Model（List）

internal class ResultData
{
    [JsonProperty]
    [DisplayName("使用者ID")]
    internal string UserID { get; set; }

    [JsonProperty]
    [DisplayName("使用者名稱")]
    internal string UserName { get; set; }

    [JsonProperty]
    [DisplayName("群組ID")]
    internal string GroupID { get; set; }

    [JsonProperty]
    [DisplayName("群組名稱")]
    internal string GroupName { get; set; }

    [JsonProperty]
    [DisplayName("母群組ID清單")]
    internal List<string> ParentGroupID { get; set; }

    [JsonProperty]
    [DisplayName("子群組ID清單")]
    internal List<string> ChildGroupID { get; set; }

    [JsonProperty]
    [DisplayName("是否可存取機敏資料")]
    internal bool SensitiveDataAccess { get; set; }

    [JsonProperty]
    [DisplayName("部門名稱")]
    internal string OrganName { get; set; }

    [JsonProperty]
    [DisplayName("職稱名稱")]
    internal string PostName { get; set; }
}


⸻

✅ Factory（FGetUserNameAndGroup.cs）

internal class FGetUserNameAndGroup
{
    internal GetUserNameAndGroupModel.GetUserNameAndGroupResponse Execute(string sysId, string userAd, string environment)
    {
        var response = new GetUserNameAndGroupModel.GetUserNameAndGroupResponse();

        try
        {
            using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString()))
            {
                conn.Open();

                // 先抓主要資訊
                string sqlMain = @"
WITH UserGroups AS (
    SELECT U.APG_NO, U.U_ID, U.U_NAME
    FROM [HI_TMMAIN].[dbo].[AP_USER] U
    WHERE U.SYS_ID=@SysID AND U.U_ID=@UserAD
)
SELECT TOP 1
    UG.U_ID AS UserID,
    UG.U_NAME AS UserName,
    G.APG_NO AS GroupID,
    G.APG_NAME AS GroupName,
    G.SENSITIVE_DATA_ACCESS AS SensitiveDataAccess,
    M.ORGAN_CAP AS OrganName,
    M.POST_NAME AS PostName
FROM UserGroups UG
INNER JOIN [HI_TMMAIN].[dbo].[AP_GROUP] G 
    ON UG.APG_NO = G.APG_NO AND G.SYS_ID=@SysID
LEFT JOIN [VW_M1EMP_MAST] M 
    ON UG.U_ID = M.EMP_NO;
";

                var result = new GetUserNameAndGroupModel.ResultData();

                using (SqlCommand cmd = new SqlCommand(sqlMain, conn))
                {
                    cmd.Parameters.AddWithValue("@SysID", sysId);
                    cmd.Parameters.AddWithValue("@UserAD", userAd);

                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            result.UserID = reader["UserID"].ToString();
                            result.UserName = reader["UserName"].ToString();
                            result.GroupID = reader["GroupID"].ToString();
                            result.GroupName = reader["GroupName"].ToString();
                            result.SensitiveDataAccess = Convert.ToBoolean(reader["SensitiveDataAccess"]);
                            result.OrganName = reader["OrganName"].ToString();
                            result.PostName = reader["PostName"].ToString();
                        }
                        else
                        {
                            response.Result_code = "0001";
                            response.Msg = "查無權限";
                            return response;
                        }
                    }
                }

                // 撈母群組
                string sqlParent = @"SELECT PARENT_APG_NO FROM [HI_TMMAIN].[dbo].[AP_GROUP] 
                                     WHERE SYS_ID=@SysID AND APG_NO=@GroupID AND PARENT_APG_NO IS NOT NULL";
                using (SqlCommand cmd = new SqlCommand(sqlParent, conn))
                {
                    cmd.Parameters.AddWithValue("@SysID", sysId);
                    cmd.Parameters.AddWithValue("@GroupID", result.GroupID);
                    using (var reader = cmd.ExecuteReader())
                    {
                        result.ParentGroupID = new List<string>();
                        while (reader.Read())
                        {
                            result.ParentGroupID.Add(reader["PARENT_APG_NO"].ToString());
                        }
                    }
                }

                // 撈子群組
                string sqlChild = @"SELECT APG_NO FROM [HI_TMMAIN].[dbo].[AP_GROUP] 
                                    WHERE SYS_ID=@SysID AND PARENT_APG_NO=@GroupID";
                using (SqlCommand cmd = new SqlCommand(sqlChild, conn))
                {
                    cmd.Parameters.AddWithValue("@SysID", sysId);
                    cmd.Parameters.AddWithValue("@GroupID", result.GroupID);
                    using (var reader = cmd.ExecuteReader())
                    {
                        result.ChildGroupID = new List<string>();
                        while (reader.Read())
                        {
                            result.ChildGroupID.Add(reader["APG_NO"].ToString());
                        }
                    }
                }

                response.Result_code = "0000";
                response.Msg = "成功";
                response.Result = result;
            }
        }
        catch (Exception ex)
        {
            response.Result_code = "9999";
            response.Msg = "系統錯誤：" + ex.Message;
        }

        return response;
    }
}


⸻

✅ 主類別呼叫 (APACCESS.cs)

public static string GetUserNameAndGroup(string requestJson)
{
    var response = new GetUserNameAndGroupModel.GetUserNameAndGroupResponse();

    try
    {
        var request = JsonConvert.DeserializeObject<GetUserNameAndGroupModel.GetUserNameAndGroupRequest>(requestJson);

        FGetUserNameAndGroup func = new FGetUserNameAndGroup();
        response = func.Execute(request.SysID, request.UserAD, request.Environment);
    }
    catch (Exception ex)
    {
        response = new GetUserNameAndGroupModel.GetUserNameAndGroupResponse
        {
            Result_code = "9999",
            Msg = "系統錯誤：" + ex.Message
        };
    }

    return JsonConvert.SerializeObject(response);
}


⸻

✅ 這樣產出的 JSON 就會跟你圖片範例一樣，
ParentGroupID / ChildGroupID 都是 真正的陣列。

要不要我下一步幫你把 第二個功能 GetGroupAllUser 也做完整 (Model + Factory + 呼叫)？