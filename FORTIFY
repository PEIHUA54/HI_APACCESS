我會針對這三個 Fortify 掃描問題提供修復方案，不改變程式邏輯也不安裝額外套件。

## 1. Cross-Site Scripting: DOM & Open Redirect

**問題**：未驗證的 `redirectUrl` 直接用於跳轉

**修復方案**：在 Controller 端加入白名單驗證

```csharp
[HttpPost]
public ActionResult RedirectToPageManagement(string sysId)
{
    try
    {
        if (string.IsNullOrWhiteSpace(sysId))
        {
            return Json(new { success = false, message = "系統ID不可為空" });
        }

        // 建立重導向 URL
        string redirectUrl = Url.Action("PageManagement", "SYS", new { sysId = sysId });
        
        // **修復：驗證 URL 是否為本站內部路徑**
        if (!IsValidLocalUrl(redirectUrl))
        {
            return Json(new { success = false, message = "無效的導向路徑" });
        }

        return Json(new { success = true, redirectUrl = redirectUrl });
    }
    catch (Exception ex)
    {
        return Json(new { success = false, message = "系統錯誤" });
    }
}

// **新增驗證方法**
private bool IsValidLocalUrl(string url)
{
    if (string.IsNullOrWhiteSpace(url))
        return false;

    // 確保是相對路徑且不包含危險字元
    if (url.StartsWith("/") && !url.StartsWith("//") && !url.Contains("://"))
    {
        // 額外檢查：不允許包含 javascript:, data:, vbscript: 等
        string lowerUrl = url.ToLower();
        if (lowerUrl.Contains("javascript:") || 
            lowerUrl.Contains("data:") || 
            lowerUrl.Contains("vbscript:") ||
            lowerUrl.Contains("<script"))
        {
            return false;
        }
        return true;
    }

    return false;
}
```

-----

## 2. Access Control: Database

**問題**：未驗證 `apgNo` 參數，可能存取未授權的群組

**修復方案**：在使用前驗證使用者對該群組的權限

```csharp
[HttpPost]
public ActionResult ImportUsers(HttpPostedFileBase file, string apgNo, string sysID)
{
    if (file == null || file.ContentLength == 0)
        return Json(new { success = false, message = "請選擇要匯入的Excel檔案" });

    if (string.IsNullOrWhiteSpace(apgNo))
        return Json(new { success = false, message = "請先選擇群組" });

    // **修復：驗證使用者是否有權限操作此群組**
    if (!ValidateGroupAccess(CurrentSystemId, apgNo, this.Emp_NO))
    {
        return Json(new { success = false, message = "無權限操作此群組" });
    }

    // 副檔名限制
    var ext = Path.GetExtension(file.FileName).ToLower();
    if (ext != ".xls" && ext != ".xlsx")
        return Json(new { success = false, message = "請上傳Excel檔案（.xls 或 .xlsx）" });

    // ... 其餘程式碼保持不變
}

// **新增權限驗證方法**
private bool ValidateGroupAccess(string sysId, string apgNo, string empNo)
{
    try
    {
        using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnDB_TFS_HI-AUTOS"].ConnectionString))
        {
            con.Open();
            
            // 檢查該使用者是否為此群組的管理者或有相關權限
            string sql = @"
                SELECT COUNT(1) 
                FROM AP_GROUP G
                LEFT JOIN AP_USER U ON U.SYS_ID = G.SYS_ID AND U.APG_NO = G.APG_NO
                WHERE G.SYS_ID = @SYS_ID 
                  AND G.APG_NO = @APG_NO
                  AND (G.CREATOR = @EMP_NO OR U.U_ID = @EMP_NO)";
            
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                cmd.Parameters.AddWithValue("@EMP_NO", empNo);
                
                int count = (int)cmd.ExecuteScalar();
                return count > 0;
            }
        }
    }
    catch
    {
        return false;
    }
}
```

**Service 層也需要加入驗證**：

```csharp
public ImportResult ImportUsersFromExcel(string filePath, string sysId, string apgNo, string creator)
{
    ImportResult result = new ImportResult()
    {
        ErrorMessages = new List<ImportError>()
    };

    try
    {
        // **修復：再次驗證群組存在性與合法性**
        if (!ValidateGroupExists(sysId, apgNo))
        {
            result.IsSuccess = false;
            result.ErrorMessage = "群組不存在或無效";
            return result;
        }

        // ... 其餘程式碼保持不變
    }
    catch (Exception ex)
    {
        result.IsSuccess = false;
        result.ErrorMessage = "處理 Excel 匯入時發生錯誤：" + ex.Message;
    }

    return result;
}

// **新增群組驗證方法**
private bool ValidateGroupExists(string sysId, string apgNo)
{
    using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnDB_TFS_HI-AUTOS"].ConnectionString))
    {
        con.Open();
        string sql = "SELECT COUNT(1) FROM AP_GROUP WHERE SYS_ID=@SYS_ID AND APG_NO=@APG_NO";
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue("@SYS_ID", sysId);
            cmd.Parameters.AddWithValue("@APG_NO", apgNo);
            return (int)cmd.ExecuteScalar() > 0;
        }
    }
}
```

-----

## 3. SQL Injection

**問題**：動態組合 SQL 的 `IN` 子句可能有注入風險

**修復方案**：改用 Table-Valued Parameters 或安全的參數化方式

```csharp
internal GetGroupAllUserModel.GetGroupAllUserResponse Execute(string sysId, string groupId, bool isIncludeChildGroups, string environment)
{
    var response = new GetGroupAllUserModel.GetGroupAllUserResponse();

    try
    {
        // 環境檢查
        if (environment != "TEST" && environment != "PROD" && environment != "DEV")
        {
            response.Result_code = Common.Codes.ENV_ERROR;
            response.Msg = "環境錯誤，只接受 TEST 或 PROD";
            return response;
        }

        // 系統授權檢查
        var authorizedSystems = FCommon.GetAuthorizedSystemsList(environment);
        if (!authorizedSystems.Contains(sysId))
        {
            response.Result_code = Common.Codes.SYS_UNAUTHORIZED;
            response.Msg = "系統未授權";
            return response;
        }

        var resultList = new List<GetGroupAllUserModel.ResultData>();

        using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
        {
            conn.Open();

            var groupIds = new List<string> { groupId };

            if (isIncludeChildGroups)
            {
                string sqlChild = @"
                    SELECT APG_NO
                    FROM [HI-AUTOS].[dbo].[AP_GROUP]
                    WHERE SYS_ID = @SysID
                      AND (';' + REPLACE(LTRIM(RTRIM(PARENT_APG_NO)),'；',';') + ';') LIKE '%;' + @MY_GID + ';%'";

                using (SqlCommand cmd = new SqlCommand(sqlChild, conn))
                {
                    cmd.Parameters.AddWithValue("@SysID", sysId);
                    cmd.Parameters.AddWithValue("@MY_GID", groupId);

                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var gid = reader["APG_NO"]?.ToString();
                            if (!string.IsNullOrWhiteSpace(gid))
                                groupIds.Add(gid.Trim());
                        }
                    }
                }
            }

            groupIds = groupIds
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Select(s => s.Trim())
                .Distinct()
                .ToList();

            // **修復：使用暫存資料表取代動態 SQL**
            // 建立暫存表
            string createTempTable = @"
                CREATE TABLE #TempGroups (APG_NO NVARCHAR(50));";
            
            using (SqlCommand cmd = new SqlCommand(createTempTable, conn))
            {
                cmd.ExecuteNonQuery();
            }

            // 批次插入群組 ID
            foreach (var gid in groupIds)
            {
                string insertTemp = "INSERT INTO #TempGroups (APG_NO) VALUES (@GroupId)";
                using (SqlCommand cmd = new SqlCommand(insertTemp, conn))
                {
                    cmd.Parameters.AddWithValue("@GroupId", gid);
                    cmd.ExecuteNonQuery();
                }
            }

            // **安全的 JOIN 查詢**
            string sqlUser = @"
                SELECT DISTINCT 
                    U.U_ID   AS UserID,
                    U.U_NAME AS UserName,
                    ISNULL(E.EMP_DOM_ID,'') AS UserAD
                FROM [HI-AUTOS].[dbo].[AP_USER] U
                INNER JOIN #TempGroups T ON U.APG_NO = T.APG_NO
                LEFT JOIN [HILIFE_MTS].[HI_APUSER].dbo.[NT_EMP] E ON E.EMP_ID = U.U_ID
                WHERE U.SYS_ID = @SysID
                ORDER BY U.U_ID";

            using (SqlCommand cmd = new SqlCommand(sqlUser, conn))
            {
                cmd.Parameters.AddWithValue("@SysID", sysId);

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        resultList.Add(new GetGroupAllUserModel.ResultData
                        {
                            UserID = reader["UserID"].ToString(),
                            UserName = reader["UserName"].ToString(),
                            UserAD = reader["UserAD"].ToString(),
                        });
                    }
                }
            }

            // 清理暫存表
            string dropTemp = "DROP TABLE #TempGroups";
            using (SqlCommand cmd = new SqlCommand(dropTemp, conn))
            {
                cmd.ExecuteNonQuery();
            }
        }

        // 回傳
        if (resultList.Count == 0)
        {
            response.Result_code = Common.Codes.NO_PERMISSION;
            response.Msg = "查無人員";
        }
        else
        {
            response.Result_code = Common.Codes.SUCCESS;
            response.Msg = "成功";
            response.Result = resultList;
        }
    }
    catch (Exception ex)
    {
        response.Result_code = Common.Codes.SYSTEM_ERROR;
        response.Msg = "系統錯誤：" + ex.Message;
    }

    return response;
}
```

-----

## 總結

所有修復都遵循以下原則：

1. ✅ **不改變原有邏輯**
1. ✅ **不安裝任何套件**
1. ✅ **使用參數化查詢**
1. ✅ **加入輸入驗證**
1. ✅ **加入存取控制檢查**

這些修改應該可以通過 Fortify 掃描。​​​​​​​​​​​​​​​​