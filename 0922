using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Xml;

public class APController : Controller
{
// 批次匯入使用者
[HttpPost]
public ActionResult ImportUsers(HttpPostedFileBase file, string apgNo)
{
if (file == null || file.ContentLength == 0)
return Json(new { success = false, message = “請選擇檔案” });

```
    string uploadDir = Server.MapPath("~/Upload");
    if (!Directory.Exists(uploadDir)) Directory.CreateDirectory(uploadDir);

    // 先儲存 Excel 檔案
    string excelFileName = $"Excel_{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(file.FileName)}";
    string excelPath = Path.Combine(uploadDir, excelFileName);
    file.SaveAs(excelPath);

    // 轉換成 CSV
    string csvPath = Path.Combine(uploadDir, $"Import_{DateTime.Now:yyyyMMddHHmmss}.csv");
    string safecsvPath = csvPath.Replace("\\", "\\\\");

    try
    {
        List<string> empNumbers = new List<string>();
        string extension = Path.GetExtension(file.FileName).ToLower();

        // 根據檔案類型選擇解析方式
        if (extension == ".xlsx")
        {
            empNumbers = ReadXlsxFile(excelPath);
        }
        else if (extension == ".xls")
        {
            empNumbers = ReadXlsFile(excelPath);
        }
        else
        {
            return Json(new { success = false, message = "不支援的檔案格式，請上傳 .xlsx 或 .xls 檔案" });
        }

        if (empNumbers.Count == 0)
        {
            return Json(new { success = false, message = "檔案中沒有找到有效的員工編號" });
        }

        // 寫入 CSV
        using (var writer = new StreamWriter(csvPath, false, Encoding.UTF8))
        {
            foreach (var empNo in empNumbers)
            {
                writer.WriteLine(empNo);
            }
        }

        var service = GetAPService();
        ImportResult result = service.ImportUsersFromCsv(safecsvPath, CurrentSystemId, apgNo, Emp_NO);

        // 清理暫存檔案
        if (System.IO.File.Exists(excelPath)) System.IO.File.Delete(excelPath);
        if (System.IO.File.Exists(csvPath)) System.IO.File.Delete(csvPath);

        if (result.IsSuccess)
            return Json(new { success = true, message = $"成功匯入 {result.SuccessCount} 筆" });
        else
            return Json(new { success = false, message = "匯入失敗", errors = result.Errors });
    }
    catch (Exception ex)
    {
        // 清理暫存檔案
        if (System.IO.File.Exists(excelPath)) System.IO.File.Delete(excelPath);
        if (System.IO.File.Exists(csvPath)) System.IO.File.Delete(csvPath);
        
        return Json(new { success = false, message = "處理檔案時發生錯誤：" + ex.Message });
    }
}

// 讀取 .xlsx 檔案（ZIP + XML 解析）
private List<string> ReadXlsxFile(string filePath)
{
    List<string> empNumbers = new List<string>();
    
    try
    {
        using (var archive = ZipFile.OpenRead(filePath))
        {
            // 讀取共享字串
            var sharedStrings = new List<string>();
            var sharedStringsEntry = archive.GetEntry("xl/sharedStrings.xml");
            if (sharedStringsEntry != null)
            {
                using (var stream = sharedStringsEntry.Open())
                {
                    var doc = new XmlDocument();
                    doc.Load(stream);
                    var nodes = doc.SelectNodes("//t");
                    foreach (XmlNode node in nodes)
                    {
                        sharedStrings.Add(node.InnerText);
                    }
                }
            }

            // 讀取第一個工作表
            var worksheetEntry = archive.GetEntry("xl/worksheets/sheet1.xml");
            if (worksheetEntry != null)
            {
                using (var stream = worksheetEntry.Open())
                {
                    var doc = new XmlDocument();
                    doc.Load(stream);
                    var cellNodes = doc.SelectNodes("//c[@r and v]");
                    
                    foreach (XmlNode cellNode in cellNodes)
                    {
                        string cellRef = cellNode.Attributes["r"].Value;
                        
                        // 只處理 A 欄
                        if (cellRef.StartsWith("A") && cellRef != "A1") // 跳過表頭
                        {
                            var valueNode = cellNode.SelectSingleNode("v");
                            if (valueNode != null)
                            {
                                string cellValue = valueNode.InnerText;
                                
                                // 檢查是否為共享字串
                                var typeAttr = cellNode.Attributes["t"];
                                if (typeAttr != null && typeAttr.Value == "s")
                                {
                                    int index = int.Parse(cellValue);
                                    if (index < sharedStrings.Count)
                                        cellValue = sharedStrings[index];
                                }
                                
                                if (!string.IsNullOrWhiteSpace(cellValue))
                                {
                                    empNumbers.Add(cellValue.Trim());
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"讀取 XLSX 檔案失敗: {ex.Message}");
    }
    
    return empNumbers;
}

// 讀取 .xls 檔案（如果 OLE DB 不可用，建議使用者轉換為 .xlsx）
private List<string> ReadXlsFile(string filePath)
{
    List<string> empNumbers = new List<string>();
    
    try
    {
        string connectionString = $"Provider=Microsoft.Jet.OLEDB.4.0;Data Source={filePath};Extended Properties='Excel 8.0;HDR=YES;IMEX=1'";
        
        using (var connection = new OleDbConnection(connectionString))
        {
            connection.Open();
            
            // 取得第一個工作表
            var schemaTable = connection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
            if (schemaTable.Rows.Count == 0) 
                throw new Exception("找不到工作表");
            
            string sheetName = schemaTable.Rows[0]["TABLE_NAME"].ToString();

            // 讀取資料（只取第一欄）
            string query = $"SELECT * FROM [{sheetName}]";
            using (var command = new OleDbCommand(query, connection))
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    var empNo = reader[0]?.ToString()?.Trim();
                    if (!string.IsNullOrWhiteSpace(empNo))
                    {
                        empNumbers.Add(empNo);
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        // 如果 OLE DB 不可用，建議使用者改用 .xlsx 格式
        throw new Exception("無法讀取 .xls 檔案，請將檔案另存為 .xlsx 格式後重新上傳");
    }
    
    return empNumbers;
}

// 下載匯入範本
[HttpGet]
public ActionResult DownloadImportTemplate()
{
    string fileName = "批次匯入使用者範本.xlsx";
    string filePath = Server.MapPath("~/File/" + fileName);

    if (!System.IO.File.Exists(filePath))
    {
        return Json(new { success = false, message = "找不到範本檔案" }, JsonRequestBehavior.AllowGet);
    }

    byte[] fileBytes = System.IO.File.ReadAllBytes(filePath);
    return File(fileBytes,
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        fileName);
}

// 假設這些方法存在
private object GetAPService()
{
    // 你的 Service 實作
    return new object();
}

private string CurrentSystemId => "HI_POSIMG"; // 你的系統 ID
private string Emp_NO => "目前登入員工編號"; // 你的員工編號
```

}