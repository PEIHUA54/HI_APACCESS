OK ✅ 你要的是一個簡化版的 GetTree：
	•	Request 只保留三個參數：SysID、GroupID、Environment。
	•	SQL 永遠只取 IS_SHOW='Y' 的項目。
	•	回傳結果 不再包含 IsShow，改成增加 FuncType 欄位。

⸻

✅ 修改後完整 FGetTree 程式碼如下：

using HI_APACCESS_DLL.Models;
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Text;

namespace HI_APACCESS_DLL.Factory
{
    internal class FGetTree
    {
        internal GetTreeModel.GetTreeResponse Execute(string sysId, string groupId, string environment)
        {
            var response = new GetTreeModel.GetTreeResponse();

            try
            {
                // 1. 環境檢查
                if (environment != "TEST" && environment != "PROD" && environment != "DEV")
                {
                    response.Result_code = Common.Codes.ENV_ERROR;
                    response.Msg = "環境錯誤，只接受 TEST、PROD 或 DEV";
                    return response;
                }

                // 2. 系統授權檢查
                var authorized = FCommon.GetAuthorizedSystemsList(environment);
                if (!authorized.Contains(sysId))
                {
                    response.Result_code = Common.Codes.SYS_UNAUTHORIZED;
                    response.Msg = "系統未授權";
                    return response;
                }

                var resultList = new List<GetTreeModel.ResultData>();

                using (SqlConnection conn = new SqlConnection(FCommon.BuildConnectionString(environment)))
                {
                    conn.Open();

                    // 3. 查詢功能清單（固定只取 IS_SHOW='Y'）
                    string sql = @"
SELECT DISTINCT
    CASE WHEN a.PARENT_ID = 'HOME' THEN '0'
         WHEN a.PARENT_ID <> 'HOME' THEN '1'
    END AS LEVEL,
    a.FUNC_ID,
    a.FUNC_NA,
    a.VIEW_H  AS CONTROLLER,
    a.VIEW_HB AS ACTION,
    a.SORT_NO,
    a.PARENT_ID,
    a.MEMO,
    a.FUNC_TYPE
FROM [HI-AUTOS].[dbo].[AP_FUNC] a
LEFT JOIN [HI-AUTOS].[dbo].[AP_USER_FUNC_CONFIG] b 
    ON a.FUNC_ID = b.FUNC_ID 
    AND a.SYS_ID = b.SYS_ID
WHERE a.SYS_ID = @SysID 
  AND b.APG_NO = @GroupID
  AND a.IS_SHOW = 'Y'
ORDER BY a.SORT_NO;
";

                    using (SqlCommand cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@SysID", sysId);
                        cmd.Parameters.AddWithValue("@GroupID", groupId);

                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                resultList.Add(new GetTreeModel.ResultData
                                {
                                    FuncID     = reader["FUNC_ID"].ToString(),
                                    FuncName   = reader["FUNC_NA"].ToString(),
                                    Controller = reader["CONTROLLER"].ToString(),
                                    Action     = reader["ACTION"].ToString(),
                                    Sort       = Convert.ToInt32(reader["SORT_NO"]),
                                    ParentID   = reader["PARENT_ID"].ToString(),
                                    Level      = reader["LEVEL"].ToString(),
                                    Memo       = reader["MEMO"]?.ToString(),
                                    FuncType   = reader["FUNC_TYPE"]?.ToString()
                                });
                            }
                        }
                    }
                }

                // 4. 結果判斷
                if (resultList.Count == 0)
                {
                    response.Result_code = Common.Codes.NO_PERMISSION;
                    response.Msg = "查無權限";
                }
                else
                {
                    response.Result_code = Common.Codes.SUCCESS;
                    response.Msg = "成功";
                    response.Result = resultList;
                }
            }
            catch (Exception ex)
            {
                response.Result_code = Common.Codes.SYSTEM_ERROR;
                response.Msg = "系統錯誤：" + ex.Message;
            }

            return response;
        }
    }
}


⸻

✅ 同時要修改的 Model (GetTreeModel)

請確認你在 Models/GetTreeModel.cs 裡有這樣的結構：

namespace HI_APACCESS_DLL.Models
{
    internal class GetTreeModel
    {
        internal class GetTreeRequest
        {
            public string SysID { get; set; }
            public string GroupID { get; set; }
            public string Environment { get; set; }
        }

        internal class GetTreeResponse
        {
            public string Result_code { get; set; }
            public string Msg { get; set; }
            public List<ResultData> Result { get; set; }
        }

        internal class ResultData
        {
            public string FuncID { get; set; }
            public string FuncName { get; set; }
            public string Controller { get; set; }
            public string Action { get; set; }
            public int Sort { get; set; }
            public string ParentID { get; set; }
            public string Level { get; set; }
            public string Memo { get; set; }
            public string FuncType { get; set; }   // ✅ 新增這個欄位
        }
    }
}


⸻

🔍 測試結果 (JSON 範例)

{
  "Result_code": "0000",
  "Msg": "成功",
  "Result": [
    {
      "FuncID": "FUNC001",
      "FuncName": "首頁",
      "Controller": "Home",
      "Action": "Index",
      "Sort": 1,
      "ParentID": "HOME",
      "Level": "0",
      "Memo": "主畫面",
      "FuncType": "MENU"
    },
    {
      "FuncID": "FUNC002",
      "FuncName": "公告維護",
      "Controller": "Announce",
      "Action": "List",
      "Sort": 2,
      "ParentID": "FUNC001",
      "Level": "1",
      "Memo": "一般公告",
      "FuncType": "PAGE"
    }
  ]
}


⸻

要我幫你一併加上主類別 APACCESS.GetTree() 呼叫的修改（因為參數少了一個）嗎？