using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Mvc;

public class APController : Controller
{
// 批次匯入使用者
[HttpPost]
public ActionResult ImportUsers(HttpPostedFileBase file, string apgNo)
{
if (file == null || file.ContentLength == 0)
return Json(new { success = false, message = “請選擇檔案” });

```
    string uploadDir = Server.MapPath("~/Upload");
    if (!Directory.Exists(uploadDir)) Directory.CreateDirectory(uploadDir);

    string csvPath = Path.Combine(uploadDir, $"Import_{DateTime.Now:yyyyMMddHHmmss}.csv");
    string safecsvPath = csvPath.Replace("\\", "\\\\");

    try
    {
        // 直接從上傳的檔案流讀取 Excel
        List<string> empNumbers = ReadExcelFromStream(file.InputStream, Path.GetExtension(file.FileName));

        if (empNumbers.Count == 0)
        {
            return Json(new { success = false, message = "檔案中沒有找到有效的員工編號" });
        }

        // 寫入 CSV
        using (var writer = new StreamWriter(csvPath, false, Encoding.UTF8))
        {
            foreach (var empNo in empNumbers)
            {
                writer.WriteLine(empNo);
            }
        }

        var service = GetAPService();
        ImportResult result = service.ImportUsersFromCsv(safecsvPath, CurrentSystemId, apgNo, Emp_NO);

        // 清理暫存檔案
        if (System.IO.File.Exists(csvPath)) System.IO.File.Delete(csvPath);

        if (result.IsSuccess)
            return Json(new { success = true, message = $"成功匯入 {result.SuccessCount} 筆" });
        else
            return Json(new { success = false, message = "匯入失敗", errors = result.Errors });
    }
    catch (Exception ex)
    {
        if (System.IO.File.Exists(csvPath)) System.IO.File.Delete(csvPath);
        return Json(new { success = false, message = "處理檔案時發生錯誤：" + ex.Message });
    }
}

// 讀取 Excel 檔案的核心方法
private List<string> ReadExcelFromStream(Stream stream, string extension)
{
    List<string> empNumbers = new List<string>();

    try
    {
        if (extension.ToLower() == ".xlsx")
        {
            empNumbers = ReadXlsxFile(stream);
        }
        else if (extension.ToLower() == ".xls")
        {
            empNumbers = ReadXlsFile(stream);
        }
        else
        {
            throw new Exception("不支援的檔案格式，請上傳 .xlsx 或 .xls 檔案");
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"讀取 Excel 檔案失敗：{ex.Message}");
    }

    return empNumbers;
}

// 讀取 .xlsx 檔案（ZIP 格式）
private List<string> ReadXlsxFile(Stream stream)
{
    List<string> empNumbers = new List<string>();

    // 讀取 ZIP 檔案結構
    byte[] buffer = new byte[stream.Length];
    stream.Read(buffer, 0, buffer.Length);

    // 尋找 ZIP 檔案中的 xl/worksheets/sheet1.xml
    int zipStart = FindZipStart(buffer);
    if (zipStart == -1) throw new Exception("不是有效的 .xlsx 檔案");

    // 解析 ZIP 結構並找到工作表資料
    var worksheetData = ExtractWorksheetFromZip(buffer, zipStart);
    if (worksheetData == null) throw new Exception("找不到工作表資料");

    // 解析工作表 XML 並取得第一欄資料
    empNumbers = ParseWorksheetXml(worksheetData);

    return empNumbers;
}

// 讀取 .xls 檔案（OLE 格式）
private List<string> ReadXlsFile(Stream stream)
{
    List<string> empNumbers = new List<string>();

    byte[] buffer = new byte[stream.Length];
    stream.Read(buffer, 0, buffer.Length);

    // 檢查是否為有效的 OLE 檔案
    if (buffer.Length < 8 || 
        buffer[0] != 0xD0 || buffer[1] != 0xCF || 
        buffer[2] != 0x11 || buffer[3] != 0xE0)
    {
        throw new Exception("不是有效的 .xls 檔案");
    }

    // 簡化的 XLS 解析 - 尋找字串資料
    empNumbers = ExtractStringsFromXls(buffer);

    return empNumbers;
}

// 尋找 ZIP 檔案開始位置
private int FindZipStart(byte[] buffer)
{
    // ZIP 檔案的標誌 "PK"
    for (int i = 0; i < buffer.Length - 1; i++)
    {
        if (buffer[i] == 0x50 && buffer[i + 1] == 0x4B)
        {
            return i;
        }
    }
    return -1;
}

// 從 ZIP 結構中提取工作表資料
private byte[] ExtractWorksheetFromZip(byte[] zipBuffer, int startPos)
{
    // 這裡是簡化的實作，實際上需要完整的 ZIP 解析
    // 尋找 sheet1.xml 的內容
    string targetFile = "xl/worksheets/sheet1.xml";
    
    // 簡化搜尋 - 尋找可能的 XML 內容
    for (int i = startPos; i < zipBuffer.Length - 100; i++)
    {
        // 尋找 XML 開始標記
        if (IsXmlStart(zipBuffer, i))
        {
            // 找到可能的 XML 開始，提取到結束
            int xmlEnd = FindXmlEnd(zipBuffer, i);
            if (xmlEnd > i)
            {
                byte[] xmlData = new byte[xmlEnd - i];
                Array.Copy(zipBuffer, i, xmlData, 0, xmlEnd - i);
                return xmlData;
            }
        }
    }
    return null;
}

// 檢查是否為 XML 開始
private bool IsXmlStart(byte[] buffer, int pos)
{
    if (pos + 5 >= buffer.Length) return false;
    
    // 檢查 "<?xml" 或 "<worksheet"
    string check = Encoding.UTF8.GetString(buffer, pos, Math.Min(10, buffer.Length - pos));
    return check.StartsWith("<?xml") || check.StartsWith("<worksheet");
}

// 尋找 XML 結束位置
private int FindXmlEnd(byte[] buffer, int startPos)
{
    for (int i = startPos + 1; i < buffer.Length - 10; i++)
    {
        string check = Encoding.UTF8.GetString(buffer, i, Math.Min(12, buffer.Length - i));
        if (check.StartsWith("</worksheet>"))
        {
            return i + 12;
        }
    }
    return buffer.Length;
}

// 解析工作表 XML
private List<string> ParseWorksheetXml(byte[] xmlData)
{
    List<string> empNumbers = new List<string>();
    
    try
    {
        string xmlContent = Encoding.UTF8.GetString(xmlData);
        
        // 簡化的 XML 解析 - 尋找第一欄的資料
        string[] lines = xmlContent.Split('\n');
        bool isFirstColumn = true;
        bool skipFirstRow = true; // 跳過表頭
        
        foreach (string line in lines)
        {
            if (line.Contains("<c r=\"A") && line.Contains("<v>"))
            {
                if (skipFirstRow)
                {
                    skipFirstRow = false;
                    continue;
                }
                
                // 提取 <v> 標籤中的值
                int startPos = line.IndexOf("<v>") + 3;
                int endPos = line.IndexOf("</v>");
                
                if (startPos > 2 && endPos > startPos)
                {
                    string value = line.Substring(startPos, endPos - startPos).Trim();
                    if (!string.IsNullOrWhiteSpace(value))
                    {
                        empNumbers.Add(value);
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        throw new Exception("解析 XML 失敗：" + ex.Message);
    }
    
    return empNumbers;
}

// 從 XLS 檔案中提取字串
private List<string> ExtractStringsFromXls(byte[] buffer)
{
    List<string> empNumbers = new List<string>();
    
    try
    {
        // 簡化的 XLS 解析 - 尋找可讀的字串
        for (int i = 0; i < buffer.Length - 20; i++)
        {
            // 尋找可能的文字內容
            if (IsReadableText(buffer, i))
            {
                string text = ExtractText(buffer, i);
                if (!string.IsNullOrWhiteSpace(text) && 
                    text.Length >= 3 && text.Length <= 20 && 
                    !text.Contains("員工編號")) // 跳過表頭
                {
                    // 檢查是否看起來像員工編號
                    if (IsValidEmployeeNumber(text))
                    {
                        empNumbers.Add(text.Trim());
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        throw new Exception("解析 XLS 失敗：" + ex.Message);
    }
    
    return empNumbers.Distinct().ToList();
}

// 檢查是否為可讀文字
private bool IsReadableText(byte[] buffer, int pos)
{
    if (pos + 10 >= buffer.Length) return false;
    
    // 檢查是否包含可讀字元
    for (int i = 0; i < 10; i++)
    {
        byte b = buffer[pos + i];
        if (b != 0 && (b < 32 || b > 126) && b != 9 && b != 10 && b != 13)
        {
            return false;
        }
    }
    return true;
}

// 提取文字內容
private string ExtractText(byte[] buffer, int startPos)
{
    StringBuilder sb = new StringBuilder();
    
    for (int i = startPos; i < buffer.Length && i < startPos + 50; i++)
    {
        byte b = buffer[i];
        if (b == 0) break;
        if (b >= 32 && b <= 126) // 可列印字元
        {
            sb.Append((char)b);
        }
        else if (b == 9 || b == 10 || b == 13) // Tab, LF, CR
        {
            break;
        }
    }
    
    return sb.ToString();
}

// 檢查是否為有效的員工編號格式
private bool IsValidEmployeeNumber(string text)
{
    // 簡單檢查：長度合理且包含字母或數字
    if (text.Length < 2 || text.Length > 15) return false;
    
    bool hasAlphaNum = false;
    foreach (char c in text)
    {
        if (char.IsLetterOrDigit(c))
        {
            hasAlphaNum = true;
            break;
        }
    }
    
    return hasAlphaNum;
}

// 下載匯入範本
[HttpGet]
public ActionResult DownloadImportTemplate()
{
    string fileName = "批次匯入使用者範本.xlsx";
    string filePath = Server.MapPath("~/File/" + fileName);

    if (!System.IO.File.Exists(filePath))
    {
        return Json(new { success = false, message = "找不到範本檔案" }, JsonRequestBehavior.AllowGet);
    }

    byte[] fileBytes = System.IO.File.ReadAllBytes(filePath);
    return File(fileBytes,
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        fileName);
}

private object GetAPService()
{
    return new f_ap();
}

private string CurrentSystemId => "HI_POSIMG";
private string Emp_NO => Session["EMP_NO"]?.ToString() ?? "SYSTEM";
```

}