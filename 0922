了解 👍
我幫你把 Controller 和 f_ap 分得更乾淨、簡單，讓 Controller 只負責「接收請求 → 呼叫 f_ap → 回傳結果」，資料處理全部丟去 f_ap。

⸻

🔹 Controller (UserManagementController.cs)

using System;
using System.Collections.Generic;
using System.Web;
using System.Web.Mvc;
using YourProject.Services;
using YourProject.Models;

namespace YourProject.Controllers
{
    public class UserManagementController : Controller
    {
        private readonly f_AP _fap = new f_AP();

        // 匯入 Excel
        [HttpPost]
        public ActionResult ImportUsers(HttpPostedFileBase File, string apgNo)
        {
            if (File == null || File.ContentLength == 0)
                return Json(new { success = false, message = "請選擇要匯入的 Excel 檔案" });

            try
            {
                string sysId = Session["SYS_ID"]?.ToString();
                string creator = User.Identity.Name;

                ImportResult result = _fap.ImportUsersFromExcel(File.InputStream, sysId, apgNo, creator);

                if (result.Errors.Count > 0)
                    return Json(new { success = false, message = $"匯入完成，有 {result.Errors.Count} 筆錯誤", errors = result.Errors });

                return Json(new { success = true, message = $"匯入成功，共新增 {result.SuccessCount} 筆" });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "匯入發生錯誤：" + ex.Message });
            }
        }

        // 下載範本
        [HttpGet]
        public ActionResult DownloadTemplate()
        {
            string path = Server.MapPath("~/File/UserImportTemplate.xlsx");
            if (!System.IO.File.Exists(path))
                return Content("找不到範本檔案");

            byte[] fileBytes = System.IO.File.ReadAllBytes(path);
            return File(fileBytes,
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "UserImportTemplate.xlsx");
        }
    }
}


⸻

🔹 f_ap (Services/f_AP.cs)

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using ExcelDataReader;
using YourProject.Models;

namespace YourProject.Services
{
    public class f_AP
    {
        private string _conn = ConfigurationManager.ConnectionStrings["ConnDB"].ConnectionString;

        // 匯入 Excel → 檢查 → 一筆筆新增
        public ImportResult ImportUsersFromExcel(Stream fileStream, string sysId, string apgNo, string creator)
        {
            var result = new ImportResult();

            using (var reader = ExcelReaderFactory.CreateReader(fileStream))
            {
                var ds = reader.AsDataSet();
                var table = ds.Tables[0]; // 第一個工作表

                for (int i = 1; i < table.Rows.Count; i++) // 從第2列開始 (跳過表頭)
                {
                    string empNo = table.Rows[i][0]?.ToString().Trim();
                    if (string.IsNullOrEmpty(empNo)) continue;

                    // 查員工
                    var emp = GetEmployeeByNo(empNo);
                    if (emp == null)
                    {
                        result.Errors.Add(new ImportError { Row = i + 1, EmpNo = empNo, Message = "員工不存在" });
                        continue;
                    }

                    // 檢查是否已存在
                    if (CheckUserExists(sysId, apgNo, emp.EMP_NO))
                    {
                        result.Errors.Add(new ImportError { Row = i + 1, EmpNo = empNo, Message = "該群組已存在此員工" });
                        continue;
                    }

                    // 新增
                    if (InsertUser(sysId, apgNo, emp.EMP_NO, emp.EMP_NAME, creator))
                        result.SuccessCount++;
                    else
                        result.Errors.Add(new ImportError { Row = i + 1, EmpNo = empNo, Message = "寫入失敗" });
                }
            }

            return result;
        }

        public EmployeeModel GetEmployeeByNo(string empNo)
        {
            string sql = "SELECT EMP_NO, EMP_NAME FROM VW_M1EMP_MAST WHERE EMP_NO=@EMP_NO";
            using (var con = new SqlConnection(_conn))
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue("@EMP_NO", empNo);
                con.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        return new EmployeeModel
                        {
                            EMP_NO = reader["EMP_NO"].ToString(),
                            EMP_NAME = reader["EMP_NAME"].ToString()
                        };
                    }
                }
            }
            return null;
        }

        public bool CheckUserExists(string sysId, string apgNo, string empNo)
        {
            string sql = "SELECT COUNT(1) FROM AP_USER WHERE SYS_ID=@SYS_ID AND APG_NO=@APG_NO AND U_ID=@U_ID";
            using (var con = new SqlConnection(_conn))
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                cmd.Parameters.AddWithValue("@U_ID", empNo);
                con.Open();
                return (int)cmd.ExecuteScalar() > 0;
            }
        }

        public bool InsertUser(string sysId, string apgNo, string empNo, string empName, string creator)
        {
            string sql = @"INSERT INTO AP_USER (SYS_ID, APG_NO, U_ID, U_NAME, CREATOR, CREATE_TIME)
                           VALUES (@SYS_ID, @APG_NO, @U_ID, @U_NAME, @CREATOR, GETDATE())";
            using (var con = new SqlConnection(_conn))
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue("@SYS_ID", sysId);
                cmd.Parameters.AddWithValue("@APG_NO", apgNo);
                cmd.Parameters.AddWithValue("@U_ID", empNo);
                cmd.Parameters.AddWithValue("@U_NAME", empName);
                cmd.Parameters.AddWithValue("@CREATOR", creator);
                con.Open();
                return cmd.ExecuteNonQuery() > 0;
            }
        }
    }
}


⸻

🔹 Model (Models/ImportResult.cs)

using System.Collections.Generic;

namespace YourProject.Models
{
    public class ImportResult
    {
        public int SuccessCount { get; set; } = 0;
        public List<ImportError> Errors { get; set; } = new List<ImportError>();
    }

    public class ImportError
    {
        public int Row { get; set; }
        public string EmpNo { get; set; }
        public string Message { get; set; }
    }

    public class EmployeeModel
    {
        public string EMP_NO { get; set; }
        public string EMP_NAME { get; set; }
    }
}


⸻

🔹 View (Index.cshtml) — 匯入 Modal

<button class="btn btn-primary" id="btnShowImport">批次匯入</button>
<button class="btn btn-success" onclick="window.location.href='@Url.Action("DownloadTemplate")'">下載範本</button>

<div class="modal fade" id="importModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">批次匯入使用者</h5>
        <button class="btn-close" data-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="importForm" enctype="multipart/form-data">
          <input type="hidden" name="apgNo" value="@ViewBag.APG_NO" />
          <input type="file" name="File" id="excelFile" class="form-control" accept=".xls,.xlsx" />
          <br />
          <button type="submit" class="btn btn-primary">匯入</button>
        </form>

        <div id="errorSection" class="mt-3 d-none">
          <h5>錯誤清單</h5>
          <table class="table table-bordered">
            <thead><tr><th>行號</th><th>員編</th><th>錯誤訊息</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>

        <div id="successSection" class="alert alert-success d-none mt-3"></div>
      </div>
    </div>
  </div>
</div>

<script>
$("#btnShowImport").click(() => $("#importModal").modal("show"));

$("#importForm").submit(function (e) {
  e.preventDefault();
  var formData = new FormData(this);
  $.ajax({
    url: '@Url.Action("ImportUsers")',
    type: 'POST',
    data: formData,
    contentType: false,
    processData: false,
    success: function (res) {
      if (res.success) {
        $("#successSection").removeClass("d-none").text(res.message);
        $("#errorSection").addClass("d-none");
      } else {
        $("#errorSection").removeClass("d-none");
        $("#errorSection tbody").empty();
        $.each(res.errors, function (i, err) {
          $("#errorSection tbody").append(`<tr><td>${err.Row}</td><td>${err.EmpNo}</td><td>${err.Message}</td></tr>`);
        });
      }
    }
  });
});
</script>


⸻

這樣 Controller 超簡潔：
	•	ImportUsers → 只接檔案，丟給 f_ap
	•	DownloadTemplate → 固定回傳一個範本

而 f_ap 負責：
	•	讀 Excel → 一筆筆檢查員工 → 新增/錯誤回報

⸻

要不要我再幫你把 錯誤訊息表格 改成有顏色區分 (比如「員工不存在」紅色、「群組已存在」橘色)，看起來更清楚？