// 批次匯入使用者
[HttpPost]
public ActionResult ImportUsers(HttpPostedFileBase file, string apgNo)
{
if (file == null || file.ContentLength == 0)
{
return Json(new { success = false, message = “請選擇要匯入的Excel檔案” });
}

```
// 檢查檔案格式
string[] allowedExtensions = { ".xlsx", ".xls" };
string fileExtension = Path.GetExtension(file.FileName).ToLower();

if (!PathValidator.IsValidFileExtension(file.FileName, allowedExtensions))
{
    return Json(new {
        success = false,
        message = "請上傳Excel檔案(.xlsx或.xls)",
        errors = new[] { new {
            RowNumber = 0,
            EmpNo = "檔案格式錯誤",
            Message = "請上傳Excel檔案(.xlsx或.xls)"
        }}
    });
}

// 確保上傳檔案存在
string uploadDir = Server.MapPath("~/Upload");
if (!Directory.Exists(uploadDir))
{
    Directory.CreateDirectory(uploadDir);
}

// 生成唯一檔案名並移除任何可能的路徑字元
string sanitizedApgNo = Path.GetFileNameWithoutExtension(apgNo);
string uniqueFileName = $"Import_{sanitizedApgNo}_{DateTime.Now.ToString("yyyyMMddHHmmss")}{fileExtension}";
string uploadPath = PathValidator.GetSafePath(uploadDir, uniqueFileName);

try
{
    // 保存上傳的檔案
    file.SaveAs(uploadPath);

    // 執行匯入
    var service = GetAPService();
    ImportResult importResult = service.ImportUsersFromExcel(uploadPath, CurrentSystemId, apgNo, Emp_NO);

    // 資料結果=>成功
    if (importResult.IsSuccess)
    {
        return Json(new
        {
            success = true,
            message = $"成功匯入 {importResult.SuccessCount} 筆資料！"
        });
    }
    else
    {
        // 資料結果=>失敗(錯誤訊息)
        string errorMessage = "匯入失敗";
        if (importResult.Errors.Count > 0)
        {
            errorMessage = $"匯入失敗，共有 {importResult.Errors.Count} 筆資料有錯誤";
        }

        return Json(new
        {
            success = false,
            message = errorMessage,
            errors = importResult.Errors
        });
    }
}
catch (Exception ex)
{
    string errorMessage = ex.Message;

    // 處理特定錯誤類型
    if (ex.Message.Contains("Microsoft.ACE.OLEDB.12.0") || ex.Message.Contains("提供者"))
    {
        errorMessage = "Excel讀取錯誤: 系統缺少必要的Excel讀取元件。";
    }
    else if (ex.Message.Contains("DATA$") || ex.Message.Contains("工作表"))
    {
        errorMessage = "Excel錯誤: 找不到名為 'DATA' 的工作表。請確認Excel檔案包含正確的工作表名稱。";
    }
    else if (ex.Message.Contains("無法將類型") || ex.Message.Contains("轉換"))
    {
        errorMessage = "Excel欄位錯誤：Excel中的某些欄位資料不符合要求。請檢查欄位表頭是否正確。";
    }

    return Json(new
    {
        success = false,
        message = errorMessage,
        errors = new[] { new {
            RowNumber = 0,
            EmpNo = "檔案處理錯誤",
            Message = errorMessage
        }}
    });
}
finally
{
    // 刪除臨時檔案
    if (System.IO.File.Exists(uploadPath))
    {
        F_Common f_COMMON = new F_Common();
        f_COMMON.SafeDeleteFile(uploadDir, uniqueFileName);
    }
}
```

}

// 下載匯入範本
[HttpGet]
public ActionResult DownloadImportTemplate()
{
string fileName = “批次匯入使用者範本.xlsx”;
string filePath = Server.MapPath(”~/File/” + fileName);

```
if (!System.IO.File.Exists(filePath))
{
    return Json(new { success = false, message = "找不到範本檔案" }, JsonRequestBehavior.AllowGet);
}

byte[] fileBytes = System.IO.File.ReadAllBytes(filePath);
return File(fileBytes,
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileName);
```

}
// f_ap 類別中的方法
public ImportResult ImportUsersFromExcel(string filePath, string sysId, string apgNo, string creator)
{
ImportResult result = new ImportResult();

```
try
{
    // 簡單檢查Excel檔案結構
    if (!CheckExcelStructure(filePath, result))
    {
        result.IsSuccess = false;
        return result;
    }

    // 執行SQL導入操作
    string sql = BuildUserImportSql(filePath);

    // 準備參數
    List<SqlParameter> parameters = new List<SqlParameter>
    {
        new SqlParameter("@filePath", filePath ?? (object)DBNull.Value),
        new SqlParameter("@SYS_ID", sysId ?? (object)DBNull.Value),
        new SqlParameter("@APG_NO", apgNo ?? (object)DBNull.Value),
        new SqlParameter("@CREATOR", creator ?? (object)DBNull.Value)
    };

    // 執行SQL並獲取結果
    using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnDB_TFS_HI_TMMAIN"].ConnectionString))
    {
        con.Open();
        using (SqlCommand cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddRange(parameters.ToArray());

            using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
            {
                DataSet ds = new DataSet();
                adapter.Fill(ds);

                // 解析結果
                if (ds.Tables.Count > 0)
                {
                    DataTable resultTable = ds.Tables[0];
                    if (resultTable.Rows.Count > 0)
                    {
                        DataRow row = resultTable.Rows[0];
                        result.SuccessCount = Convert.ToInt32(row["SuccessCount"]);
                        result.IsSuccess = result.SuccessCount >= 0;

                        // 如果有錯誤信息
                        if (!result.IsSuccess && ds.Tables.Count > 1)
                        {
                            DataTable errorTable = ds.Tables[1];
                            foreach (DataRow errorRow in errorTable.Rows)
                            {
                                result.Errors.Add(new ImportError
                                {
                                    RowNumber = Convert.ToInt32(errorRow["RowNumber"]),
                                    EmpNo = errorRow["EmpNo"].ToString(),
                                    Message = errorRow["ErrorMessage"].ToString()
                                });
                            }
                        }
                    }
                }
            }
        }
    }
}
catch (Exception ex)
{
    result.IsSuccess = false;
    
    // 處理特殊的錯誤類型
    if (ex.Message.Contains("Microsoft.ACE.OLEDB.12.0") || ex.Message.Contains("提供者"))
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "系統設定錯誤",
            Message = "Excel讀取錯誤: 系統缺少必要的Excel讀取元件。請聯絡IT部門安裝 'Microsoft Access Database Engine'。"
        });
    }
    else if (ex.Message.Contains("DATA$") || ex.Message.Contains("工作表"))
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "工作表錯誤",
            Message = "Excel結構錯誤: 找不到名為 'DATA' 的工作表。請確認您的Excel檔案包含正確的工作表名稱。"
        });
    }
    else if (ex.Message.Contains("無法將類型") || ex.Message.Contains("轉換"))
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "數據類型錯誤",
            Message = "數據類型錯誤：Excel中的某些欄位資料類型不符合要求。請檢查數據格式是否正確。"
        });
    }
    else
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "系統錯誤",
            Message = ex.Message
        });
    }
}

return result;
```

}

// 簡單檢查Excel檔案結構
private bool CheckExcelStructure(string filePath, ImportResult result)
{
try
{
// 從filePath中獲取目錄和檔案名
string directory = Path.GetDirectoryName(filePath);
string fileName = Path.GetFileName(filePath);

```
    // 使用安全的路徑驗證
    string safeFilePath = PathValidator.GetSafePath(directory, fileName);

    // 檢查文件是否存在
    if (!System.IO.File.Exists(safeFilePath))
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "檔案錯誤",
            Message = "找不到上傳的Excel檔案，請重新上傳"
        });
        return false;
    }

    // 檢查文件副檔名
    string[] allowedExtensions = { ".xlsx", ".xls" };
    if (!PathValidator.IsValidFileExtension(fileName, allowedExtensions))
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "檔案格式錯誤",
            Message = "請上傳Excel檔案(.xlsx或.xls)"
        });
        return false;
    }

    // 檢查檔案大小
    FileInfo fileInfo = new FileInfo(safeFilePath);
    if (fileInfo.Length == 0)
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "檔案錯誤",
            Message = "Excel檔案為空，請確認檔案內容"
        });
        return false;
    }

    // 檢查檔案是否被其他程式開啟
    try
    {
        using (FileStream fs = File.Open(safeFilePath, FileMode.Open, FileAccess.Read, FileShare.None))
        {
            // 檔案可以獨占開啟，代表沒有被其他程式佔用
        }
    }
    catch (IOException)
    {
        result.Errors.Add(new ImportError
        {
            RowNumber = 0,
            EmpNo = "檔案被佔用",
            Message = "Excel檔案正被其他程式開啟，請關閉後重試"
        });
        return false;
    }

    return true;
}
catch (Exception ex)
{
    result.Errors.Add(new ImportError
    {
        RowNumber = 0,
        EmpNo = "檔案檢查錯誤",
        Message = ex.Message
    });
    return false;
}
```

}

// 建構員工匯入的SQL
private string BuildUserImportSql(string filePath)
{
StringBuilder sql = new StringBuilder();

```
sql.Append(@"
```

BEGIN TRY
– 創建臨時表
IF OBJECT_ID(‘tempdb..#TEMP_IMPORT’) IS NOT NULL DROP TABLE #TEMP_IMPORT;
CREATE TABLE #TEMP_IMPORT (
RowNum INT IDENTITY(1,1),
EMP_NO VARCHAR(20),
IsValid BIT DEFAULT 1,
ErrorMsg NVARCHAR(200)
);

```
-- 使用 OpenDataSource 讀取 Excel
DECLARE @Query NVARCHAR(MAX);
SET @Query = N'
INSERT INTO #TEMP_IMPORT (EMP_NO)
SELECT CAST(t.[員工編號] AS VARCHAR(20))
FROM OpenDataSource(''Microsoft.ACE.OLEDB.12.0'', 
     ''Data Source=' + REPLACE(@filePath, '''', '''''') + ';User ID=Admin;Password=;Extended properties=Excel 12.0'')...[DATA$] AS t
WHERE t.[員工編號] IS NOT NULL AND t.[員工編號] <> ''''
';

EXEC sp_executesql @Query;

-- 檢查是否有匯入的資料
DECLARE @RowCount INT = (SELECT COUNT(*) FROM #TEMP_IMPORT);

IF @RowCount = 0
BEGIN
    SELECT -1 AS SuccessCount;
    SELECT 0 AS RowNumber, '資料錯誤' AS EmpNo, '匯入失敗：Excel 檔案中沒有符合條件的資料，請檢查工作表名稱是否為 DATA，以及是否包含[員工編號]欄位' AS ErrorMessage;
    RETURN;
END

-- 員工不存在檢查
UPDATE t SET IsValid=0, ErrorMsg=N'員工不存在'
FROM #TEMP_IMPORT t
WHERE NOT EXISTS (
    SELECT 1 FROM VW_M1EMP_MAST e WHERE e.EMP_NO = t.EMP_NO
);

-- 已存在於群組檢查
UPDATE t SET IsValid=0, ErrorMsg=N'群組已存在此員工'
FROM #TEMP_IMPORT t
WHERE EXISTS (
    SELECT 1 FROM AP_USER u 
    WHERE u.SYS_ID=@SYS_ID AND u.APG_NO=@APG_NO AND u.U_ID=t.EMP_NO
);

-- 寫入正式表
INSERT INTO AP_USER(SYS_ID,APG_NO,U_ID,U_NAME,CREATOR,CREATE_TIME)
SELECT @SYS_ID, @APG_NO, e.EMP_NO, e.EMP_NAME, @CREATOR, GETDATE()
FROM #TEMP_IMPORT t
JOIN VW_M1EMP_MAST e ON e.EMP_NO=t.EMP_NO
WHERE t.IsValid=1;

-- 回傳結果
SELECT COUNT(*) AS SuccessCount FROM #TEMP_IMPORT WHERE IsValid=1;
SELECT RowNum AS RowNumber, EMP_NO, ErrorMsg AS ErrorMessage FROM #TEMP_IMPORT WHERE IsValid=0;
```

END TRY
BEGIN CATCH
SELECT -1 AS SuccessCount;
SELECT 0 AS RowNumber, ‘’ AS EmpNo, ERROR_MESSAGE() AS ErrorMessage;
END CATCH;
“);

```
return sql.ToString();
```

}
