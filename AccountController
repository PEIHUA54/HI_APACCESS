using HI_APACCESS.Service;
using Newtonsoft.Json;
using Serilog;
using System;
using System.Security.Cryptography;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using static HI_APACCESS.ViewModels.VM_Employee;
using DevExpress.Data.PivotGrid;
using System.Linq;
using DevExpress.Utils.OAuth.Provider;
using System.Collections.Generic;

namespace HI_APACCESS.Controllers
{
    public class AccountController : HI_APACCESSBaseController
    {
        static ILogger log = SVS_Serilog._log;

        [AllowAnonymous]
        [HttpGet]
        public ActionResult Login()
        {
            // 登入時清空所有 Session 資料
            Session.RemoveAll();

            string LOGIN_NAME = null;
            var authCookie = Request.Cookies[FormsAuthentication.FormsCookieName];
            if (authCookie != null)
            {
                var cookieValue = authCookie.Value;
                if (!String.IsNullOrWhiteSpace(cookieValue))
                {
                    try
                    {
                        var ticket = FormsAuthentication.Decrypt(cookieValue);
                        if (ticket.Expiration >= DateTime.Now)
                        {
                            LOGIN_NAME = ticket.Name;
                        }
                    }
                    catch (CryptographicException cex)
                    {
                        log.Error<string>(cex, cex.Message, cex.StackTrace);
                        FormsAuthentication.SignOut();
                    }
                    finally
                    {
                        Serilog.Log.CloseAndFlush();
                    }
                }
            }

            string AD = !string.IsNullOrEmpty(LOGIN_NAME) ? LOGIN_NAME : SVS_員工基本資料.Get_員工AD();
            VM_員工部門職稱 login = SVS_員工基本資料.Get_員工基本資料(AD);
            login.AD = AD;
            return View(login);
        }

        [AllowAnonymous]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Login([Bind] VM_員工部門職稱 login, string ReturnUrl)
        {
            if (ModelState.IsValid)
            {
                FormsAuthentication.RedirectFromLoginPage(login.AD, true);

                string str_員工AD = SVS_員工基本資料.Get_員工AD();
                string str_員編 = SVS_員工基本資料.Get_員工編號(str_員工AD);
                string AD = !string.IsNullOrEmpty(login.AD) ? login.AD : str_員工AD;

                if (str_員工AD != login.AD && !SVS_Dictionary.List_測試站台登入者白名單.Contains(str_員編))
                {
                    AD = str_員工AD;
                }

                var encTicket = LoginTicket(AD);

                //將 Ticket 寫入 Cookie
                HttpCookie authCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encTicket)
                {
                    Secure = Request.IsSecureConnection,  //確保在htpps下啟用secure屬性
                    HttpOnly = true //防止客戶端腳本訪問 cookie
                };
                Response.Cookies.Add(authCookie);
                //Response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, encTicket));


                if (String.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
                {
                    return RedirectToAction("Main", "Home");
                }

                //本地url驗證
                if (!Url.IsLocalUrl(ReturnUrl))
                {
                    return RedirectToAction("Login", "Account");
                }
                //檢查是否為允許的路徑
                string[] allowedPaths = new[]
                {
                        "/Main/",
                        "/Home/",
                         "/Account/",
                    };

                if (allowedPaths.Any(path => ReturnUrl.StartsWith(path, StringComparison.OrdinalIgnoreCase)))
                {
                    return RedirectToAction("Login", "Account", new { ReturnUrl = ReturnUrl });
                    //return Redirect(ReturnUrl); //在允許清單中，允許重定向
                }
                return RedirectToAction("Login", "Account");
            }
            return View(login);
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult Logout(string ReturnUrl)
        {
            Session.Abandon();
            FormsAuthentication.SignOut();

            if (String.IsNullOrEmpty(ReturnUrl))
            {
                return RedirectToAction("Login", "Account");
            }
            //檢查是否為本地url
            if (!Url.IsLocalUrl(ReturnUrl))
            {
                return RedirectToAction("Login", "Account");
            }
            string[] allowedPaths = new string[]
            {
                "/Account/",
                "/Login/",
                "/Home"
            };
            if (allowedPaths.Any(path => ReturnUrl.StartsWith(path, StringComparison.OrdinalIgnoreCase)))
            {
                return RedirectToAction("Login", "Account", new { ReturnUrl = ReturnUrl });
                //return Redirect(ReturnUrl);
            }

            return RedirectToAction("Login", "Account");

        }

        #region FormsAuthenticationTicket

        private string LoginTicket(string AD)
        {
            VM_員工部門職稱 login = SVS_員工基本資料.Get_員工基本資料(AD);
            login.AD = AD;

            //新增UserData，存入群組等相關使用者資料
            //新增表單驗證用的票證
            var ticket = new FormsAuthenticationTicket(1,//版本
                login.AD,//使用者名稱
                DateTime.Now,//發行時間
                DateTime.Now.AddMinutes(20),//有效期限
                false,//是否將 Cookie 設定成 Session Cookie，如果是則會在瀏覽器關閉後移除
                JsonConvert.SerializeObject(login),//將要記錄的使用者資訊轉換為 JSON 字串
                FormsAuthentication.FormsCookiePath);//儲存 Cookie 的路徑

            //將 Ticket 加密
            var encTicket = FormsAuthentication.Encrypt(ticket);

            //var NAME = FormsAuthentication.Decrypt(Request.Cookies[FormsAuthentication.FormsCookieName].Value).Name;
            //var UserData = FormsAuthentication.Decrypt(Request.Cookies[FormsAuthentication.FormsCookieName].Value).UserData;
            //Console.WriteLine(NAME);
            //Console.WriteLine(UserData);

            return encTicket;
        }


        #endregion FormsAuthenticationTicket

        #region Session TimeOut

        #region 參考資料
        //Session TimeOut  https://blog.darkthread.net/blog/prevent-aspnet-session-timeout/
        #endregion 參考資料

        [HttpPost]
        public ActionResult RefreshSession()
        {
            // 檢查是否透過 JWT token 登入
            string systemId = Session["CurrentSystemId"] as string;
            if (!string.IsNullOrEmpty(systemId))
            {
                return Content("success"); // JWT 用戶直接回傳成功
            }

            // 原本的 RefreshSession 邏輯
            if (User.Identity.IsAuthenticated)
            {
                return Content("success");
            }
            else
            {
                return Content("lost");
            }
            //string Status = "lost";
            //var authCookie = Request.Cookies[FormsAuthentication.FormsCookieName];
            //if (authCookie != null)
            //{
            //    var cookieValue = authCookie.Value;
            //    if (!String.IsNullOrWhiteSpace(cookieValue))
            //    {
            //        var ticket = FormsAuthentication.Decrypt(cookieValue);

            //        //檢查Session遺失、不變、更新(剩餘時間小於30秒)
            //        if (ticket.Expiration <= DateTime.Now)
            //        {
            //            Status = "lost";
            //        }
            //        else if (ticket.Expiration > DateTime.Now && ticket.Expiration <= DateTime.Now.AddSeconds(30))
            //        {
            //            VM_員工部門職稱 login = JsonConvert.DeserializeObject<VM_員工部門職稱>(ticket.UserData);
            //            var ticket_new = new FormsAuthenticationTicket(1,//版本
            //                login.AD,//使用者名稱
            //                DateTime.Now,//發行時間
            //                DateTime.Now.AddMinutes(20),//有效期限
            //                false,//是否將 Cookie 設定成 Session Cookie，如果是則會在瀏覽器關閉後移除
            //                JsonConvert.SerializeObject(login),//將要記錄的使用者資訊轉換為 JSON 字串
            //                FormsAuthentication.FormsCookiePath);//儲存 Cookie 的路徑

            //            //將 Ticket 加密
            //            var encTicket = FormsAuthentication.Encrypt(ticket_new);

            //            // 清空所有 Session 資料
            //            Session.RemoveAll();

            //            //將 Ticket 寫入 Cookie
            //            //Response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, encTicket));
            //            HttpCookie sessionCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encTicket)
            //            {
            //                Secure = Request.IsSecureConnection,  //確保在htpps下啟用secure屬性
            //                HttpOnly = true //防止客戶端腳本訪問 cookie
            //            };
            //            Response.Cookies.Add(sessionCookie);



            //            Status = "refresh-OK-新的有效時間:" + ticket_new.Expiration.ToString("yyyy-MM-dd HH:mm:ss");
            //        }
            //        else
            //        {
            //            Status = "continue-OK-原本的有效時間:" + ticket.Expiration.ToString("yyyy-MM-dd HH:mm:ss");
            //        }
            //    }
            //}
            //return Content(Status);
        }

        #endregion Session TimeOut

    }
}
