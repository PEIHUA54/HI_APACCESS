using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;

namespace HI_APACCESS_DLL_FRAMEWORK
{
/// <summary>
/// 請求參數
/// </summary>
public class GetFunctionAndAccessUrlRequest
{
public string sys_id { get; set; }        // 系統ID
public string type { get; set; }          // 1=頁面設定, 2=權限設定
public string environment { get; set; }   // TEST=測試, PROD=正式
}

```
/// <summary>
/// 回應結果
/// </summary>
public class GetFunctionAndAccessUrlResponse
{
    public string code { get; set; }     // 結果代碼
    public string message { get; set; }  // 訊息
    public string url { get; set; }      // 功能連結
}

/// <summary>
/// 主要對外類別 - 合併所有功能
/// </summary>
public class Class1
{
    private readonly string _connectionString;

    // 環境網址設定
    private readonly Dictionary<string, string> EnvironmentUrls = new Dictionary<string, string>
    {
        { "TEST", "http://10.8.254.68/HI_APACCESS_TEST" },
        { "PROD", "http://10.8.254.68/HI_APACCESS_PROD" },
        { "DEBUG", "http://localhost:53088" }
    };

    // 功能類型設定
    private readonly Dictionary<string, string> TypeActions = new Dictionary<string, string>
    {
        { "1", "TokenEntry_FUNC" },  // 頁面&按鈕設定
        { "2", "TokenEntry" }        // 權限設定
    };

    public Class1()
    {
        // 資料庫連線字串，您可能需要從 config 讀取
        _connectionString = "Data Source=YourServer;Initial Catalog=HI_TMMAIN;Integrated Security=true;";
    }

    /// <summary>
    /// 從資料庫取得授權系統清單
    /// </summary>
    public List<string> GetAuthorizedSystemsList()
    {
        string sql = "SELECT [SYS_ID] FROM [HI_TMMAIN].[dbo].[AP_SYS]";
        var systemIds = new List<string>();

        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(sql, connection))
                {
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            systemIds.Add(reader["SYS_ID"].ToString());
                        }
                    }
                }
            }
            
            return systemIds;
        }
        catch (Exception ex)
        {
            // 如果資料庫查詢失敗，回傳預設清單
            return new List<string> { "HI_POS", "HI_POSIMG", "POS_LOG" };
        }
    }

    /// <summary>
    /// 執行 SQL 查詢 (模擬 SVS_DBmanager.QueryBySQL)
    /// </summary>
    private DataTable QueryBySQL(string sql, List<SqlParameter> parameters)
    {
        var dataTable = new DataTable();
        
        using (var connection = new SqlConnection(_connectionString))
        {
            connection.Open();
            using (var command = new SqlCommand(sql, connection))
            {
                if (parameters != null)
                {
                    command.Parameters.AddRange(parameters.ToArray());
                }
                
                using (var adapter = new SqlDataAdapter(command))
                {
                    adapter.Fill(dataTable);
                }
            }
        }
        
        return dataTable;
    }

    /// <summary>
    /// 產生 JWT Token（整合 JwtHelper 的邏輯）
    /// </summary>
    private string GenerateJwtToken(string systemId, string empNo = null)
    {
        var claims = new[]
        {
            new Claim("systemId", systemId),
            new Claim("empNo", empNo ?? "SYSTEM_USER")
        };

        string SecretKey = "NpzedRHDaT8uSc10ntMJ+ohvUJ/VJYdHs1LyK3KP+Q0=";

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(SecretKey));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: "hi_ap_access_dll",
            audience: "hi_ap_access_web",
            claims: claims,
            expires: DateTime.Now.AddHours(1),
            signingCredentials: creds
        );

        return new JwtSecurityTokenHandler().WriteToken(token);
    }

    /// <summary>
    /// 取得功能連結 - 主要方法
    /// </summary>
    public string GetFunctionAndAccessUrl(string Request_)
    {
        var response = new GetFunctionAndAccessUrlResponse();
        try
        {
            GetFunctionAndAccessUrlRequest request = JsonConvert.DeserializeObject<GetFunctionAndAccessUrlRequest>(Request_);
            
            // 檢查類型是否正確
            if (!TypeActions.ContainsKey(request.type))
            {
                response = new GetFunctionAndAccessUrlResponse
                {
                    code = "1002",
                    message = "類型錯誤，只接受 1 或 2",
                    url = ""
                };
                return JsonConvert.SerializeObject(response);
            }

            // 檢查環境是否正確
            if (!EnvironmentUrls.ContainsKey(request.environment))
            {
                response = new GetFunctionAndAccessUrlResponse
                {
                    code = "1003",
                    message = "環境錯誤，只接受 TEST、PROD",
                    url = ""
                };
                return JsonConvert.SerializeObject(response);
            }

            // 檢查系統權限 - 使用資料庫查詢
            var authorizedSystems = GetAuthorizedSystemsList();
            if (!authorizedSystems.Contains(request.sys_id))
            {
                response = new GetFunctionAndAccessUrlResponse
                {
                    code = "0001",
                    message = "查無權限",
                    url = ""
                };
                return JsonConvert.SerializeObject(response);
            }

            // 產生 JWT Token
            string token = GenerateJwtToken(request.sys_id);

            // 組合最終 URL（含 Token）
            string baseUrl = EnvironmentUrls[request.environment];
            string action = TypeActions[request.type];
            string finalUrl = $"{baseUrl}/Home/{action}?token={token}";

            // 回傳成功結果
            response = new GetFunctionAndAccessUrlResponse
            {
                code = "0000",
                message = "成功",
                url = finalUrl
            };
            return JsonConvert.SerializeObject(response);
        }
        catch (Exception ex)
        {
            response = new GetFunctionAndAccessUrlResponse
            {
                code = "9999",
                message = "系統錯誤：" + ex.Message,
                url = ""
            };
            return JsonConvert.SerializeObject(response);
        }
    }
}
```

}